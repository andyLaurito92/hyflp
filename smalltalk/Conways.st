Object subclass: #ConwaysCell	instanceVariableNames: 'rowPosition colPosition aConwaysWorld'	classVariableNames: ''	poolDictionaries: ''	category: 'Conways'!!ConwaysCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 15:14'!nextStateInWorld	self subclassResponsibility .! !!ConwaysCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:11'!colPosition	^ colPosition .! !!ConwaysCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:33'!positionedAtRow: rowNumber andCol: columnNumber inWorld: aWorld.	rowPosition := rowNumber.	colPosition := columnNumber.	aConwaysWorld := aWorld.! !!ConwaysCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:11'!rowPosition	^ rowPosition .! !!ConwaysCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 11:52'!quantityOfAliveNeighbours	^ ( (aConwaysWorld neighboursOfCellInRowPositon: rowPosition andColPos: colPosition) select:[ :aCell | aCell isAlive  ] ) size .! !!ConwaysCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 20:41'!isAlive	self subclassResponsibility .! !!ConwaysCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 12:23'!conwaysWorld	^ aConwaysWorld .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConwaysCell class	instanceVariableNames: ''!!ConwaysCell class methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:33'!positionedAtRow: rowNumber andCol: columnNumber inWorld: aWorld	^ self new positionedAtRow: rowNumber andCol: columnNumber inWorld: aWorld! !ConwaysCell subclass: #DeathCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Conways'!!DeathCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 20:42'!isAlive	^ false.! !!DeathCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 15:19'!nextStateInWorld	|numbOfAliveNeighbours|	numbOfAliveNeighbours := self quantityOfAliveNeighbours .	(numbOfAliveNeighbours = 3) ifTrue: [ ^ AliveCell positionedAtRow: self rowPosition andCol: self colPosition inWorld: self conwaysWorld ]! !ConwaysCell subclass: #AliveCell	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Conways'!!AliveCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 20:42'!isAlive	^ true.! !!AliveCell methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 15:20'!nextStateInWorld	|numbOfAliveNeighbours|	numbOfAliveNeighbours := self quantityOfAliveNeighbours .		(numbOfAliveNeighbours = 2) ifTrue: [ ^ self ]		 ifFalse: [ ^ DeathCell positionedAtRow: self rowPosition andCol: self colPosition inWorld: self conwaysWorld ].! !TestCase subclass: #TestConwaysWorld	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Conways'!!TestConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:32'!test02CanObtainACellOfACertainPosition	| aConwaysWorld aCell |	aConwaysWorld := ConwaysWorld initializeWithHeight: 10 andWidth: 10.	aCell := aConwaysWorld giveMeCellLivingInRow: 3 andCol: 5.	self assert: (aCell isKindOf: ConwaysCell)! !!TestConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 15:31'!test05WhenWePlayNextOnConwaysWorldThenConwaysRulesAreRespected	| aConwaysWorld aCell anotherCell|	aConwaysWorld := ConwaysWorld initializeWithHeight: 10 andWidth: 10.		"The cell is (3,5) has 5 alive neighbours and its a death cell, so after playing next it should be dead."	aCell := aConwaysWorld giveMeCellLivingInRow: 3 andCol: 5.	self assert: aCell isAlive not.		"The cell is (1,4) has 2 alive neighbours and its an aliveCell, so after playing next it should still be  alive."	anotherCell := aConwaysWorld giveMeCellLivingInRow: 1 andCol: 4.	self assert: anotherCell isAlive.		aConwaysWorld := aConwaysWorld advancedLifeCells.		self assert: ( aConwaysWorld giveMeCellLivingInRow: 3 andCol: 5 ) isAlive not.	self assert: ( aConwaysWorld giveMeCellLivingInRow: 1 andCol: 4 ) isAlive.					! !!TestConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:32'!test01CanCreateAWorldWithSomeAliveCells	| aConwaysWorld |	aConwaysWorld := ConwaysWorld initializeWithHeight: 10 andWidth: 10.	self assert: (aConwaysWorld aliveCells size = 0) not! !!TestConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:32'!test03CanObtainARandomAliveCell	| aConwaysWorld anAliveCell |	aConwaysWorld := ConwaysWorld initializeWithHeight: 10 andWidth: 10.	anAliveCell := aConwaysWorld giveMeAnAliveCell.	self assert: anAliveCell isAlive.	self		assert: (aConwaysWorld giveMeCellLivingInRow: anAliveCell rowPosition andCol: anAliveCell colPosition) = anAliveCell! !!TestConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 15:31'!test04CanObtainQuantityOfAliveNeighboursOfAGivenCell	| aConwaysWorld aCell aliveNeighbours  |	aConwaysWorld := ConwaysWorld initializeWithHeight: 10 andWidth: 10.	aCell := aConwaysWorld giveMeCellLivingInRow: 3 andCol: 5.	aliveNeighbours := aCell quantityOfAliveNeighbours.	self assert: aliveNeighbours = 5.! !Object subclass: #ConwaysWorld	instanceVariableNames: 'matrix'	classVariableNames: ''	poolDictionaries: ''	category: 'Conways'!!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 20:43'!aliveCells	|anOrderCollection|	anOrderCollection := OrderedCollection new .	matrix do:[ :aConwaysCell | (aConwaysCell isAlive) ifTrue: [ anOrderCollection add:aConwaysCell ] ].	^ anOrderCollection .! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 12:28'!numOfRows	^ matrix rowCount.! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 15:21'!advancedLifeCells	|aNewMatrix newConwaysWorld|	aNewMatrix := Matrix rows: self numOfRows columns: self numbOfCols.	matrix do:[ :aCell | 		aNewMatrix at: aCell rowPosition at: aCell colPosition put: aCell nextStateInWorld.		newConwaysWorld := ConwaysWorld initializeWithMatrix:aNewMatrix.	].	^ newConwaysWorld.! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:34'!initializeWithHeight: aHeight andWidth: aWidth	matrix := Matrix		rows: aHeight		columns: aWidth		tabulate: [ :rowNumber :columnNumber | 			| aRandomNumber |			aRandomNumber := (Random seed: rowNumber + columnNumber) nextValue \\ 9.			aRandomNumber < 5				ifTrue: [ AliveCell positionedAtRow: rowNumber andCol: columnNumber inWorld: self ]				ifFalse: [ DeathCell positionedAtRow: rowNumber andCol: columnNumber inWorld: self ] ].	^ self! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 12:37'!numbOfCols	^ matrix columnCount .! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 15:05'!neighboursOfCellInRowPositon:aRowPos andColPos:aColPos	|neighbours|	neighbours := OrderedCollection new.	"Im not proud of this solution, but in case that we are asking for a invalid position, we are going to assume that its a DeathCell"	neighbours add: ( matrix at: aRowPos - 1 at: aColPos - 1 ifInvalid: DeathCell new  ).	neighbours add: ( matrix at: aRowPos - 1 at: aColPos ifInvalid: DeathCell new ).	neighbours add: ( matrix at: aRowPos - 1 at: aColPos + 1 ifInvalid: DeathCell new ).	neighbours add: ( matrix at: aRowPos at: aColPos - 1 ifInvalid: DeathCell new ).	neighbours add: ( matrix at: aRowPos at: aColPos + 1 ifInvalid: DeathCell new ).	neighbours add: ( matrix at: aRowPos + 1 at: aColPos - 1 ifInvalid: DeathCell new ).	neighbours add: ( matrix at: aRowPos + 1 at: aColPos ifInvalid: DeathCell new ).	neighbours add: ( matrix at: aRowPos + 1 at: aColPos + 1 ifInvalid: DeathCell new ).	^ neighbours.! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:13'!giveMeCellLivingInRow:aRowPosition andCol:aColPosition	^ matrix at:aRowPosition at:aColPosition ifInvalid: [ ^ Exception signal:'The position provided is not a valid one' ].! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 20:49'!giveMeAnAliveCell	matrix do:[ :aConwaysCell | (aConwaysCell isAlive) ifTrue: [ ^ aConwaysCell ] ].! !!ConwaysWorld methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 12:45'!initializeWithMatrix:aMatrix	matrix := aMatrix .	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConwaysWorld class	instanceVariableNames: ''!!ConwaysWorld class methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/25/2015 12:45'!initializeWithMatrix:aMatrix	^ self new initializeWithMatrix:aMatrix.! !!ConwaysWorld class methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:32'!initializeWithHeight: aHeight andWidth: aWidth	^ self new initializeWithHeight: aHeight andWidth: aWidth! !Object subclass: #Board	instanceVariableNames: 'height width'	classVariableNames: ''	poolDictionaries: ''	category: 'Conways'!!Board methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:32'!initializeWithHeight: aHeight andWidth: aWidth	height := aHeight.	width := aWidth.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Board class	instanceVariableNames: ''!!Board class methodsFor: 'as yet unclassified' stamp: 'AndyLaurito 10/24/2015 21:32'!initializeWith: aHeight and: aWidth	self new initializeWithHeight: aHeight andWidth: aWidth! !