'From Pharo4.0 of 18 March 2013 [Latest update: #40607] on 14 April 2015 at 9:52:49.547808 am'!----STARTUP----2015-04-14T09:52:16.024237+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:52:53.433201+02:00 Pharo-40607.image priorSource: 0!----STARTUP----2015-04-14T09:53:10.503839+02:00 as /Users/denker/Desktop/40607/Pharo-40607.image!----QUIT----2015-04-14T09:53:23.786467+02:00 Pharo-40607.image priorSource: 196!----STARTUP----2015-04-14T12:27:52.175891+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 4/14/2015 12:25' prior: 55184883!commentForCurrentUpdate ^ 'new .sources'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 4/14/2015 12:25'!script608	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-StephaneDucasse.35.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-StephaneDucasse.1091.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 4/14/2015 12:25'!update40608	"self new update40608"	self withUpdateLog: 'new .sources'.	self loadTogether: self script608 merge: false.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40607!ScriptLoader removeSelector: #script607!"ScriptLoader40"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-TheIntegrator.786.mcz') load.ScriptLoader new update40608.!----End fileIn----!----QUIT----2015-04-14T12:27:53.326572+02:00 Pharo.image priorSource: 376!----STARTUP----2015-04-14T12:27:53.4798+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-14T12:27:57.217802+02:00 Pharo.image priorSource: 15532!----STARTUP----2015-04-14T12:42:49.686617+02:00 as /builds/workspace/Pharo-4.0-Update-Step-5-Publish/Pharo.image!----SNAPSHOT----2015-04-14T12:42:49.754863+02:00 Pharo-40608.image priorSource: 15722!----STARTUP----2015-04-15T17:06:01.522135+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 4/15/2015 17:02' prior: 33555098!commentForCurrentUpdate ^ '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 4/15/2015 17:02'!script609	^ 'AST-Core-TheIntegrator.283.mczAST-Tests-Core-TheIntegrator.65.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-TheIntegrator.12.mczAnnouncements-Tests-Core-TheIntegrator.25.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-TheIntegrator.13.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-TheIntegrator.21.mczAsmJit-x86-TheIntegrator.40.mczAthens-Balloon-MarcusDenker.20.mczAthens-Cairo-MarcusDenker.85.mczAthens-CairoPools-NicolaiHess.14.mczAthens-Core-MarcusDenker.50.mczAthens-Examples-TudorGirba.43.mczAthens-Morphic-NicolaiHess.44.mczAthens-Text-NicolaiHess.16.mczBalloon-StephaneDucasse.118.mczBalloonTests-MarcusDenker.3.mczChroma-CubeHelix-TheIntegrator.2.mczCodeImport-TheIntegrator.48.mczCollections-Abstract-StephaneDucasse.276.mczCollections-Arithmetic-TheIntegrator.15.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-TheIntegrator.9.mczCollections-Sequenceable-TheIntegrator.189.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-TheIntegrator.168.mczCollections-Strings-TheIntegrator.350.mczCollections-Support-MarcusDenker.57.mczCollections-Unordered-TheIntegrator.207.mczCollections-Weak-TheIntegrator.88.mczCollectionsTests-TheIntegrator.683.mczCompiler-TheIntegrator.582.mczCompression-TheIntegrator.149.mczCompressionTests-TheIntegrator.29.mczConfigurationCommandLineHandler-Core-TheIntegrator.27.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebugger-Tests-TheIntegrator.2.mczDebuggerActions-MarcusDenker.74.mczDebuggerFilters-TheIntegrator.9.mczDebuggerModel-TheIntegrator.106.mczDeprecated40-TheIntegrator.48.mczEmbeddedFreeType-TheIntegrator.15.mczEmbeddedFreeType-Tests-TheIntegrator.4.mczEmergencyEvaluator-MarcusDenker.32.mczFileSystem-Core-TheIntegrator.171.mczFileSystem-Disk-TheIntegrator.79.mczFileSystem-Memory-TheIntegrator.57.mczFileSystem-Tests-Core-TheIntegrator.88.mczFileSystem-Tests-Disk-TheIntegrator.22.mczFileSystem-Tests-Memory-TheIntegrator.8.mczFileSystem-Zip-TheIntegrator.17.mczFiles-TheIntegrator.373.mczFontChooser-TheIntegrator.7.mczFontInfrastructure-TheIntegrator.8.mczFontInfrastructure-Tests-TheIntegrator.2.mczFreeType-TheIntegrator.695.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-TheIntegrator.804.mczFuelCommandLineHandler-TheIntegrator.27.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-TheIntegrator.384.mczFuelTools-Debugger-StephaneDucasse.12.mczGT-Inspector-TudorGirba.305.mczGT-InspectorExtensions-Core-TudorGirba.144.mczGT-Playground-TudorGirba.110.mczGT-Spotter-StefanReichhart.307.mczGT-Spotter-EventRecorder-JurajKubelka.89.mczGT-SpotterExtensions-Core-TudorGirba.141.mczGT-Tests-Inspector-StefanReichhart.33.mczGT-Tests-Playground-StefanReichhart.4.mczGT-Tests-Spotter-TudorGirba.8.mczGenerated-code-non-existing-package-EstebanLorenzano.2.mczGlamour-Announcements-AndreiChis.8.mczGlamour-Browsers-TorstenBergmann.109.mczGlamour-Core-StefanReichhart.299.mczGlamour-Examples-TorstenBergmann.291.mczGlamour-Helpers-AndreiChis.39.mczGlamour-Morphic-Brick-StefanReichhart.398.mczGlamour-Morphic-Brick-Tests-AliakseiSyrel.13.mczGlamour-Morphic-Pager-AndreiChis.103.mczGlamour-Morphic-Renderer-AndreiChis.320.mczGlamour-Morphic-Theme-StefanReichhart.212.mczGlamour-Morphic-Widgets-AndreiChis.177.mczGlamour-Presentations-AndreiChis.176.mczGlamour-Rubric-Presentations-AndreiChis.41.mczGlamour-Tests-Core-AliakseiSyrel.104.mczGlamour-Tests-Morphic-AndreiChis.124.mczGlamour-Tests-Resources-AndreiChis.3.mczGlamour-Tests-Rubric-AndreiChis.14.mczGofer-Core-TheIntegrator.228.mczGofer-Tests-TheIntegrator.164.mczGraphics-Canvas-TheIntegrator.2.mczGraphics-Display Objects-TheIntegrator.159.mczGraphics-Files-TheIntegrator.58.mczGraphics-Fonts-EstebanLorenzano.96.mczGraphics-Fonts-Tests-EstebanLorenzano.3.mczGraphics-Primitives-StephaneDucasse.157.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Shapes-TheIntegrator.2.mczGraphics-Tests-TheIntegrator.72.mczGraphics-Transformations-TheIntegrator.12.mczGroupManager-TheIntegrator.72.mczGroupManagerUI-TheIntegrator.40.mczGrowl-TheIntegrator.37.mczHelpSystem-Core-TheIntegrator.120.mczHelpSystem-Tests-TheIntegrator.30.mczHudsonBuildTools20-TheIntegrator.65.mczJobs-EstebanLorenzano.4.mczKernel-TheIntegrator.2011.mczKernelTests-TheIntegrator.767.mczKeymapping-Core-EstebanLorenzano.195.mczKeymapping-KeyCombinations-EstebanLorenzano.45.mczKeymapping-Pragmas-TheIntegrator.50.mczKeymapping-Settings-StephaneDucasse.83.mczKeymapping-Tests-TheIntegrator.94.mczKeymapping-Tools-Spec-TheIntegrator.30.mczKomitter-TheIntegrator.115.mczManifest-Core-TheIntegrator.215.mczManifest-CriticBrowser-TheIntegrator.177.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-TheIntegrator.49.mczMenuRegistration-TheIntegrator.74.mczMessageBrowserRefactoringAddition-StephaneDucasse.2.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-StephaneDucasse.33.mczMetacello-MC-TheIntegrator.699.mczMetacello-PharoCommonPlatform-StephaneDucasse.12.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-StephaneDucasse.6.mczMetacello-ProfStef-MarcusDenker.16.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-TheIntegrator.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-ToolBox-MarcusDenker.141.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-TheIntegrator.1009.mczMonticello-Tests-TheIntegrator.6.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-TheIntegrator.182.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-TheIntegrator.341.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-TheIntegrator.441.mczMorphic-Core-TheIntegrator.166.mczMorphic-Examples-TheIntegrator.40.mczMorphic-Widgets-Basic-TheIntegrator.41.mczMorphic-Widgets-ColorPicker-StephaneDucasse.17.mczMorphic-Widgets-Extra-TheIntegrator.22.mczMorphic-Widgets-List-TheIntegrator.15.mczMorphic-Widgets-NewList-TheIntegrator.5.mczMorphic-Widgets-Pluggable-TheIntegrator.44.mczMorphic-Widgets-Scrolling-TheIntegrator.23.mczMorphic-Widgets-Tabs-TheIntegrator.12.mczMorphic-Widgets-Taskbar-StephaneDucasse.7.mczMorphic-Widgets-Tree-TheIntegrator.27.mczMorphic-Widgets-Windows-TheIntegrator.47.mczMorphicTests-TheIntegrator.99.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-StephaneDucasse.40.mczMultilingual-OtherLanguages-MarcusDenker.12.mczMultilingual-Tests-MarcusDenker.35.mczMultilingual-TextConversion-TheIntegrator.70.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-TheIntegrator.194.mczNECompletion-Tests-TheIntegrator.2.mczNativeBoost-Core-TheIntegrator.164.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-TheIntegrator.92.mczNativeBoost-Unix-MarcusDenker.17.mczNativeBoost-Win32-TheIntegrator.57.mczNautilus-TheIntegrator.909.mczNautilus-Tests-TheIntegrator.12.mczNautilusCommon-TheIntegrator.260.mczNautilusRefactoring-TheIntegrator.216.mczNetwork-Kernel-StephaneDucasse.112.mczNetwork-MIME-MarcusDenker.69.mczNetwork-Mail-StephaneDucasse.39.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-UUID-MarcusDenker.29.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-TheIntegrator.103.mczNewValueHolder-TheIntegrator.27.mczNodeNavigation-StephaneDucasse.51.mczNonInteractiveTranscript-TheIntegrator.15.mczOSWindow-Core-TheIntegrator.20.mczOSWindow-SDL2-EstebanLorenzano.19.mczOSWindow-VM-IgorStasenko.2.mczOpalCompiler-Core-TheIntegrator.641.mczOpalCompiler-Tests-TheIntegrator.282.mczOpalDecompiler-TheIntegrator.31.mczOpalTools-TheIntegrator.16.mczPharo-Help-TheIntegrator.15.mczPolymorph-TaskbarIcons-MarcusDenker.40.mczPolymorph-Widgets-TheIntegrator.1211.mczPragmaCollector-TheIntegrator.3.mczProfStef-Core-TheIntegrator.55.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-TheIntegrator.25.mczRPackage-Core-TheIntegrator.383.mczRPackage-SystemIntegration-TheIntegrator.232.mczRPackage-Tests-TheIntegrator.167.mczRecentSubmissions-StephaneDucasse.233.mczRefactoring-Changes-TheIntegrator.65.mczRefactoring-Core-TheIntegrator.270.mczRefactoring-Critics-TheIntegrator.160.mczRefactoring-Environment-TheIntegrator.49.mczRefactoring-Tests-Changes-MarcusDenker.38.mczRefactoring-Tests-Core-TheIntegrator.123.mczRefactoring-Tests-Critics-MarcusDenker.25.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczReflectivity-StephaneDucasse.25.mczReflectivity-Tests-TheIntegrator.16.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-TheIntegrator.15.mczRing-Core-Containers-TheIntegrator.41.mczRing-Core-Kernel-TheIntegrator.207.mczRing-Monticello-MarcusDenker.29.mczRing-Tests-Containers-MarcusDenker.18.mczRing-Tests-Kernel-TheIntegrator.83.mczRing-Tests-Monticello-MarcusDenker.19.mczRubric-AndreiChis.187.mczSUnit-Core-TheIntegrator.138.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-TheIntegrator.48.mczSUnit-UI-TheIntegrator.110.mczSUnit-UITesting-TheIntegrator.21.mczScriptLoader-Tests-TheIntegrator.4.mczSettings-Graphics-StephaneDucasse.28.mczSettings-Polymorph-TheIntegrator.78.mczSettings-System-EstebanLorenzano.38.mczShoreLine-Report-Core-TommasoDalSasso.9.mczShoreLine-Report-Settings-TommasoDalSasso.2.mczShoreLine-Report-UI-TommasoDalSasso.12.mczShout-TheIntegrator.236.mczShoutTests-TheIntegrator.27.mczSlot-TheIntegrator.604.mczSlot-Tests-TheIntegrator.39.mczSmartSuggestions-TheIntegrator.147.mczSmartSuggestions-Tests-TheIntegrator.2.mczSpec-Core-StephaneDucasse.386.mczSpec-Debugger-TheIntegrator.236.mczSpec-Examples-TheIntegrator.91.mczSpec-Help-TheIntegrator.8.mczSpec-Inspector-TheIntegrator.238.mczSpec-Layout-TheIntegrator.67.mczSpec-MorphicAdapters-TheIntegrator.207.mczSpec-PolyWidgets-TheIntegrator.57.mczSpec-Tests-StephaneDucasse.45.mczSpec-Tools-StephaneDucasse.261.mczStartupPreferences-TheIntegrator.131.mczSystem-Announcements-TheIntegrator.98.mczSystem-Caching-TheIntegrator.23.mczSystem-CachingTests-TheIntegrator.12.mczSystem-Changes-StephaneDucasse.257.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-TheIntegrator.167.mczSystem-CommandLineHandler-TheIntegrator.3.mczSystem-FilePackage-TheIntegrator.132.mczSystem-FileRegistry-StephaneDucasse.33.mczSystem-Finalization-TheIntegrator.19.mczSystem-Hashing-StephaneDucasse.45.mczSystem-History-EstebanLorenzano.7.mczSystem-History-Tests-EstebanLorenzano.3.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-TheIntegrator.88.mczSystem-Localization-Tests-TheIntegrator.5.mczSystem-Object Events-MarcusDenker.15.mczSystem-Platforms-StephaneDucasse.61.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-StephaneDucasse.309.mczSystem-Sound-StephaneDucasse.18.mczSystem-Support-EstebanLorenzano.1094.mczSystem-VMEvents-TheIntegrator.2.mczTests-TheIntegrator.724.mczText-Core-StephaneDucasse.31.mczText-Diff-StephaneDucasse.4.mczText-Edition-StephaneDucasse.77.mczText-Edition-Tests-EstebanLorenzano.3.mczText-Scanning-TheIntegrator.24.mczText-Tests-EstebanLorenzano.7.mczTool-Base-TheIntegrator.66.mczTool-Browser-Old-TheIntegrator.37.mczTool-Changes-TheIntegrator.22.mczTool-ConfigurationBrowser-TheIntegrator.15.mczTool-Diff-TheIntegrator.2.mczTool-FileList-TheIntegrator.34.mczTool-FileList-Tests-EstebanLorenzano.3.mczTool-FilePackageBrowser-TheIntegrator.7.mczTool-Finder-TheIntegrator.30.mczTool-ImageCleaner-TheIntegrator.10.mczTool-ProcessBrowser-StephaneDucasse.6.mczTool-Profilers-TheIntegrator.17.mczTool-SystemReporter-StephaneDucasse.10.mczTool-Transcript-TheIntegrator.12.mczTool-TxWorkspace-TheIntegrator.6.mczTool-Workspace-TheIntegrator.24.mczTools-TheIntegrator.1503.mczToolsTest-MarcusDenker.denker.71.mczTraits-TheIntegrator.757.mczTranscript-StephaneDucasse.32.mczTxText-Athens-TheIntegrator.44.mczTxText-AthensTests-IgorStasenko.9.mczTxText-Model-NicolaiHess.50.mczTxText-Styler-IgorStasenko.3.mczTxTextTests-Model-IgorStasenko.26.mczUIManager-TheIntegrator.141.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-TheIntegrator.34.mczUpdateStreamer-Tests-TheIntegrator.9.mczUserManager-Core-MarcusDenker.13.mczUserManager-Tests-TheIntegrator.5.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-ChristopheDemarey.53.mczVersionner-Core-DependenciesModel-TheIntegrator.95.mczVersionner-Core-Model-ChristopheDemarey.49.mczVersionner-Spec-Browser-ChristopheDemarey.173.mczVersionner-Tests-Core-Commands-TheIntegrator.17.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-ChristopheDemarey.33.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-SvenVanCaekenberghe.37.mczZinc-Character-Encoding-Tests-SvenVanCaekenberghe.22.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-SvenVanCaekenberghe.423.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.48.mczZinc-Resource-Meta-FileSystem-TheIntegrator.8.mczZinc-Resource-Meta-Tests-SvenVanCaekenberghe.33.mczZinc-Tests-SvenVanCaekenberghe.223.mczZinc-Zodiac-SvenVanCaekenberghe.34.mczZodiac-Core-SvenVanCaekenberghe.38.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-SvenVanCaekenberghe.12.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 4/15/2015 17:02'!update40609	"self new update40609"	Smalltalk allClasses do: [ :each | each class organization comment: nil; commentStamp: nil ].	self withUpdateLog: '15341 remove download sources setting	https://pharo.fogbugz.com/f/cases/1534115342 Metaclasses should not have a source pointer	https://pharo.fogbugz.com/f/cases/15342'.	self loadTogether: self script609 merge: false.	[ | workspace window |		workspace := Workspace openContents: '"Pharo 4.0=========Welcome to Pharo, an immersive live programming environment.You can learn pharo by highlighting the next line and selecting [Do it] from the context menu:"PharoTutorial go."Pharo 4.0 already comes pre-loaded with a rich set of packages that you can use to explore the system and develop your own applications. However there is also a huge library of user contributed projects that you can also load using the ''Configurations Browser'' by executing:"MetacelloConfigurationBrowser open."This browser is also accessible from the World | Tools menu (just click the desktop, select Tools, and then Configuration Browser).You can find information about Pharo on http://www.pharo.org. Some useful starting points are:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 1600 issues treated in this release. Sumarized issues for 4.0:=========================New stuff---------- GTools (Playground, Inspector, Spotter)- Slots model instance variables as first class enities and enable meta-programming on this level.- ShoreLine reporter: submit information automatically when errors happen- TxModel, a modern text model who works with Athens (Preview)- OSWindow, a new way to handle windows and input events (Preview)- Glamour, a mature declarative browser builder- Dark themeUpdated stuff-------------- Zinc/Zodiac- Fuel- VersionnerAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo40ChangeLogs.md"'	label: 'Welcome to Pharo 4.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 4.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.	self flushCaches.self cleanRepositories.! !ScriptLoader removeSelector: #update40608!ScriptLoader removeSelector: #script608!"ScriptLoader40"!!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 55982943!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !!SystemSystemSettings class methodsFor: 'settings' stamp: 'EstebanLorenzano 4/15/2015 15:03' prior: 58207175!systemSettingOn: aBuilder	<systemsettings>	(aBuilder group: #pharoSystem) 		label: 'System';		description: 'General system settings' ;		with: [			(aBuilder setting: #serverMode)				label: 'Server mode';				target: WorldState;				description: 'If enabled, then each main rendering loop will always wait a complete delay of 50ms' .			(aBuilder setting: #useLocale)				label: 'Use locale';				target: Locale;				selector: #activated;				description: 'Use the system locale to set the system language at startup.']! !!SmalltalkImage commentStamp: 'StephaneDucasse 6/7/2011 15:48' prior: 33587555!My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  !SmalltalkImage removeSelector: #shouldDownloadSourcesFile!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile:!SmalltalkImage class removeSelector: #shouldDownloadSourcesFile!"Settings-System"!"System-Support"!"Postscript:Leave the line above, and replace the rest of this comment by a useful one.Executable statements should follow this comment, and shouldbe separated by periods, with no exclamation points (!!).Be sure to put any further comments in double-quotes, like this one."|repository|repository := MCHttpRepository                location: 'http://smalltalkhub.com/mc/Pharo/Pharo40/main'                user: ''                password: ''.(repository loadVersionFromFileNamed:'ScriptLoader40-EstebanLorenzano.789.mcz') load.ScriptLoader new update40609.!----End fileIn----!----QUIT----2015-04-15T17:06:04.321261+02:00 Pharo.image priorSource: 15916!----STARTUP----2015-04-15T17:06:04.475077+02:00 as /builds/workspace/Pharo-4.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2015-04-15T17:06:08.61668+02:00 Pharo.image priorSource: 36763!----STARTUP----2015-05-09T12:36:32.356381-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!OOStack class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2012 11:51'!stackEmptyErrorDescription		^ 'Stack is empty'! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!test01StackShouldBeEmptyWhenCreated	| stack |		stack := OOStack new.		self assert: stack isEmpty! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!test02PushAddElementsToTheStack	| stack |		stack := OOStack new.	stack push: 'Something'.		self deny: stack isEmpty! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:31'!test03PopRemovesElementsFromTheStack	| stack |		stack := OOStack new.	stack push: 'Something'.	stack pop.		self assert: stack isEmpty! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/8/2012 08:20'!test04PopReturnsLastPushedObject	| stack pushedObject |		stack := OOStack new.	pushedObject := 'Something'.	stack push: pushedObject.		self assert: stack pop = pushedObject! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:33'!test05StackBehavesLIFO	| stack firstPushedObject secondPushedObject |		stack := OOStack new.	firstPushedObject := 'First'.	secondPushedObject := 'Second'.		stack push: firstPushedObject.	stack push: secondPushedObject.		self assert: stack pop = secondPushedObject.	self assert: stack pop = firstPushedObject.	self assert: stack isEmpty 	! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:35'!test06TopReturnsLastPushedObject	| stack pushedObject |		stack := OOStack new.	pushedObject := 'Something'.		stack push: pushedObject.		self assert: stack top = pushedObject.	! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:36'!test07TopDoesNotRemoveObjectFromStack	| stack pushedObject |		stack := OOStack new.	pushedObject := 'Something'.		stack push: pushedObject.		self assert: stack size = 1.	stack top.	self assert: stack size = 1.	! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:38'!test08CanNotPopWhenThereAreNoObjectsInTheStack	| stack  |		stack := OOStack new.	self		should: [ stack pop ]		raise: Error		withExceptionDo: [ :anError |			self assert: anError messageText = OOStack stackEmptyErrorDescription ]		! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/16/2012 16:53'!test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects	| stack  |		stack := OOStack new.	stack push: 'Something'.	stack pop.		self		should: [ stack pop ]		raise: Error		withExceptionDo: [ :anError |			self assert: anError messageText = OOStack stackEmptyErrorDescription ]		! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/16/2012 16:53'!test10CanNotTopWhenThereAreNoObjectsInTheStack	| stack  |		stack := OOStack new.	self		should: [ stack top ]		raise: Error		withExceptionDo: [ :anError |			self assert: anError messageText = OOStack stackEmptyErrorDescription ]		! !"Stack-Exercise"!!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoPabloLeraRomeroGonzalo 5/9/2015 12:41'!isEmpty	self shouldBeImplemented.! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 12:42' prior: 51150071!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 12:44' prior: 33594830!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 12:44' prior: 33595256!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !LinkedList subclass: #OOStack	instanceVariableNames: ''	classVariableNames: ''	category: 'Stack-Exercise'!!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoPabloLeraRomeroGonzalo 5/9/2015 12:46' prior: 33594688!isEmpty	self isEmpty.! !----STARTUP----2015-05-09T12:47:31.563391-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!OOStack class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2012 11:51'!stackEmptyErrorDescription		^ 'Stack is empty'! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!test01StackShouldBeEmptyWhenCreated	| stack |		stack := OOStack new.		self assert: stack isEmpty! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:30'!test02PushAddElementsToTheStack	| stack |		stack := OOStack new.	stack push: 'Something'.		self deny: stack isEmpty! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:31'!test03PopRemovesElementsFromTheStack	| stack |		stack := OOStack new.	stack push: 'Something'.	stack pop.		self assert: stack isEmpty! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/8/2012 08:20'!test04PopReturnsLastPushedObject	| stack pushedObject |		stack := OOStack new.	pushedObject := 'Something'.	stack push: pushedObject.		self assert: stack pop = pushedObject! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:33'!test05StackBehavesLIFO	| stack firstPushedObject secondPushedObject |		stack := OOStack new.	firstPushedObject := 'First'.	secondPushedObject := 'Second'.		stack push: firstPushedObject.	stack push: secondPushedObject.		self assert: stack pop = secondPushedObject.	self assert: stack pop = firstPushedObject.	self assert: stack isEmpty 	! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:35'!test06TopReturnsLastPushedObject	| stack pushedObject |		stack := OOStack new.	pushedObject := 'Something'.		stack push: pushedObject.		self assert: stack top = pushedObject.	! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:36'!test07TopDoesNotRemoveObjectFromStack	| stack pushedObject |		stack := OOStack new.	pushedObject := 'Something'.		stack push: pushedObject.		self assert: stack size = 1.	stack top.	self assert: stack size = 1.	! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/7/2012 11:38'!test08CanNotPopWhenThereAreNoObjectsInTheStack	| stack  |		stack := OOStack new.	self		should: [ stack pop ]		raise: Error		withExceptionDo: [ :anError |			self assert: anError messageText = OOStack stackEmptyErrorDescription ]		! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/16/2012 16:53'!test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects	| stack  |		stack := OOStack new.	stack push: 'Something'.	stack pop.		self		should: [ stack pop ]		raise: Error		withExceptionDo: [ :anError |			self assert: anError messageText = OOStack stackEmptyErrorDescription ]		! !!OOStackTest methodsFor: 'test' stamp: 'HernanWilkinson 5/16/2012 16:53'!test10CanNotTopWhenThereAreNoObjectsInTheStack	| stack  |		stack := OOStack new.	self		should: [ stack top ]		raise: Error		withExceptionDo: [ :anError |			self assert: anError messageText = OOStack stackEmptyErrorDescription ]		! !"Stack-Exercise"!----SNAPSHOT----2015-05-09T12:48:26.357402-03:00 Pharo4.0.image priorSource: 36957!!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 12:48'!isEmpty	self shouldBeImplemented.! !LinkedList subclass: #OOStack	instanceVariableNames: ''	classVariableNames: ''	category: 'Stack-Exercise'!OOStack removeSelector: #isEmpty!!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 12:50' prior: 51150071!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 12:52'!push: aString 	self shouldBeImplemented.! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 12:53' prior: 33600243!push: aString 	self addFirst: aString.! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:03'!pop	self shouldBeImplemented.! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:03' prior: 33599836!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:04' prior: 33600655!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:04' prior: 33600517!pop	self removeFirst.! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:05' prior: 33601504!pop | elem | 	elem := self first. 	self removeFirst.		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:06' prior: 33601631!pop 	^ self removeFirst.		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:06'!top	self shouldBeImplemented.! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:06' prior: 33601911!top	^self first.! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:08' prior: 33601081!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:08' prior: 33602171!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:10' prior: 33602597!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:14' prior: 33603023!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !----SNAPSHOT----2015-05-09T13:15:41.541399-03:00 Pharo4.0.image priorSource: 44945!!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:17' prior: 33601794!pop	self isEmpty ifTrue: [self class  ]. 	^ self removeFirst.		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:18' prior: 33603957!pop	self isEmpty ifTrue: [^ self class stackEmptyErrorDescription ]. 	^ self removeFirst.		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:18' prior: 33604128!pop	self isEmpty ifTrue: [^ self class stackEmptyErrorDescription ] ifFalse:[self removeFirst].		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:18' prior: 33604327!pop	self isEmpty ifTrue: [^ self class stackEmptyErrorDescription ] ifFalse:[ ^ self removeFirst].		! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:19' prior: 33603449!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:20' prior: 33604741!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:21' prior: 33604531!pop	self isEmpty ifTrue: [^ Error message: self class stackEmptyErrorDescription ] ifFalse:[ ^ self removeFirst].		! !----STARTUP----2015-05-09T13:23:47.274315-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!Actor class methodsFor: 'as yet unclassified' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:43'!newAtPosition: aPosition 	^ self new position: aPosition.! !!Actor methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:20'!nextPositionInto: aConstructionBlockType going: aDirection	^ self subclassResponsibility.! !!Actor methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:33'!position	^ position! !!Actor methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:33'!position: aPosition 	position := aPosition! !!Ghost methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:21'!nextPositionInto: aConstructionBlockType going: aDirection	^ aConstructionBlockType nextPositionForGhost: self going: aDirection.! !!Pacman methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:21'!nextPositionInto: aConstructionBlockType going: aDirection	^ aConstructionBlockType nextPositionForPacman: self going: aDirection.! !!ConstructionBlockType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:29'!nextPositionFor: anActor going: aDirection	^ anActor nextPositionInto: self going: aDirection.! !!ConstructionBlockType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:22'!nextPositionForGhost: aGhost going: aDirection	^ self subclassResponsibility.! !!ConstructionBlockType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:23'!nextPositionForPacman: aPacman going: aDirection	^ self subclassResponsibility.! !!HouseDoorType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:40'!nextPositionForGhost: aGhost going: aDirection	^ (aGhost position) + aDirection.! !!HouseDoorType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:26'!nextPositionForPacman: aPacman going: aDirection	^ aPacman position.! !!LeftTransporterType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:27'!nextPositionForGhost: aGhost going: aDirection	^ aGhost position.! !!LeftTransporterType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:30'!nextPositionForPacman: aPacman going: aDirection	^ 3@10.! !!SpaceType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:41'!nextPositionForGhost: aGhost going: aDirection	^ (aGhost position) + aDirection.! !!SpaceType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:41'!nextPositionForPacman: aPacman going: aDirection	^ (aPacman position) + (aDirection * 2).! !!WallType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:28'!nextPositionForGhost: aGhost going: aDirection	^ aGhost position.! !!WallType methodsFor: 'positioning' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:28'!nextPositionForPacman: aPacman going: aDirection	^ aPacman position.! !!PacManTest methodsFor: 'actors' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:44'!blueGhost	 ^Ghost newAtPosition: 0@0.! !!PacManTest methodsFor: 'movements' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:42'!down	^0@(-1).! !!PacManTest methodsFor: 'construction block types' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:14'!ghostHouseDoorType	^ HouseDoorType new.! !!PacManTest methodsFor: 'movements' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:42'!left	^(-1)@0.! !!PacManTest methodsFor: 'construction block types' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:21'!leftTransporterType	^ LeftTransporterType new. ! !!PacManTest methodsFor: 'actors' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:44'!pacman	^Pacman newAtPosition: 5@5. ! !!PacManTest methodsFor: 'movements' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:42'!right	^ 1@0.! !!PacManTest methodsFor: 'construction block types' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 20:07'!spaceType	^ SpaceType new.! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:31'!test01GhostCanNotGoIntoAWall	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self left ).	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self right ).	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self up ).	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:31'!test02PacmanCanNotGoIntoAWall	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self left ).	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self right ).	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self up ).	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:31'!test03GhostMovesIntoSpaces	self assert: ( self blueGhost position + (-1@0) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self left ).	self assert: ( self blueGhost position +  (1@0) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self right ).	self assert: ( self blueGhost position +  (0@1) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self up ).	self assert: ( self blueGhost position + (0@ -1) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 4/28/2015 19:25'!test04PacmanMovesIntoSpaces	self assert: ( self pacman position + (-2@0) ) equals: ( self spaceType nextPositionFor: self pacman going: self left ).	self assert: ( self pacman position +  (2@0) ) equals: ( self spaceType nextPositionFor: self pacman going: self right ).	self assert: ( self pacman position +  (0@2) ) equals: ( self spaceType nextPositionFor: self pacman going: self up ).	self assert: ( self pacman position + (0@ -2) ) equals: ( self spaceType nextPositionFor: self pacman going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test05GhostCanEnterHisHouse	self assert: ( self blueGhost position + (-1@0) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self left).	self assert: ( self blueGhost position +  (1@0) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self right ).	self assert: ( self blueGhost position +  (0@1) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self up ).	self assert: ( self blueGhost position + (0@ -1) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test06PacmanCanNotEnterGhostHouse	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self left ).	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self right ).	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self up ).	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test07GhostCanNotGoIntoTransporter	self assert: self blueGhost position equals: ( self leftTransporterType nextPositionFor: self blueGhost going: self left ).	self assert: self blueGhost position equals: ( self leftTransporterType nextPositionFor: self blueGhost going: self right ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test08TransporterMovesPacmanToNewPosition	self assert: (3@10) equals: ( self leftTransporterType nextPositionFor: self pacman going: self left ).	self assert: (3@10) equals: ( self leftTransporterType nextPositionFor: self pacman going: self right ).! !!PacManTest methodsFor: 'movements' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 21:42'!up	^ 0@1.! !!PacManTest methodsFor: 'construction block types' stamp: 'PabloArtusoGonzaloLeraRomero 4/28/2015 19:46'!wallType	^WallType new.! !"PacMan"!!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:28' prior: 33603449!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:29' prior: 33614450!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:30' prior: 33614876!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:30' prior: 33615302!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:30' prior: 33615728!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/9/2015 13:34' prior: 33616154!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:35' prior: 33601794!pop 	[self removeFirst] on: Error do: [Error messageText: self class ] .		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:35' prior: 33617003!pop 	[self removeFirst] on: Error do: [Error messageText: self class stackEmptyErrorDescription ] .		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:36' prior: 33617184!pop	|result| 	[result := self removeFirst] on: Error do: [Error messageText: self class stackEmptyErrorDescription ] .		! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:36' prior: 33617392!pop	|result| 	[result := self removeFirst] on: Error do: [^ Error messageText: self class stackEmptyErrorDescription ] .		^result	! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:38' prior: 33617620!pop	|result| 	[result := self removeFirst] on: Error do: [^ Error new messageText: self class stackEmptyErrorDescription ] .		^result	! !!OOStack methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/9/2015 13:42' prior: 33602046!top	|result| 	[result := self first.] on: Error do: [^ Error new messageText: self class stackEmptyErrorDescription ] .		^result! !----SNAPSHOT----2015-05-09T13:42:49.434327-03:00 Pharo4.0.image priorSource: 49338!----SNAPSHOT----2015-05-09T22:17:23.816392-03:00 Pharo4.0.image priorSource: 63802!----QUIT/NOSAVE----2015-05-09T22:17:29.10233-03:00 Pharo4.0.image priorSource: 63887!----STARTUP----2015-05-10T22:52:36.810107-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!----SNAPSHOT----2015-05-10T22:52:56.658124-03:00 Pharo4.0.image priorSource: 63887!"Stack-Exercise"!----QUIT----2015-05-10T22:56:48.546102-03:00 Pharo4.0.image priorSource: 64167!----STARTUP----2015-05-30T23:41:08.66381-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!----QUIT/NOSAVE----2015-05-30T23:41:11.471823-03:00 Pharo4.0.image priorSource: 64271!----STARTUP----2015-05-30T23:41:19.651427-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:58'!+ anArithmeticMeasure	self subclassResponsibility ! !!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:59'!= anotherObject	^ anotherObject isKindOf: ArithmeticMeasure.! !!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:31'!addMeasure: aMeasure	self subclassResponsibility ! !!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:31'!addMeasureBag: aMeasureBag	self subclassResponsibility ! !!Measure class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:14'!canNotConvertErrorMessage	^ 'Error while trying to convert.'! !!Measure class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:34'!withAmount: anAmount unit: aUnit 	^ self new initializeWithAmount: anAmount unit: aUnit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:34'!+ anArithmeticMeasure	^ anArithmeticMeasure addMeasure: self.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:03'!= anotherObject	(super = anotherObject) ifFalse: [ ^ false ].	(self convertAmountToBaseUnit = 0 and: [anotherObject convertAmountToBaseUnit = 0]) ifTrue: [ ^ true ].	^ self convertAmountToBaseUnit = anotherObject convertAmountToBaseUnit 		and: [self unit isConvertibleTo: anotherObject unit].! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:33'!addMeasure: aMeasure 	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure } ].	^ (Measure withAmount: self convertAmountToBaseUnit + (aMeasure convertAmountToBaseUnit )  unit: self unit baseUnit ) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:34'!addMeasureBag: aMeasureBag	^ aMeasureBag addMeasure: self.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 16:57'!amount	^ amount! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:15'!convertAmountToBaseUnit	^ self unit convertAmountToBaseUnit: (self amount).! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:52'!convertAmountToUnit: aUnit 	^ aUnit convertAmountFromBaseUnit: self convertAmountToBaseUnit ! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:15'!convertTo: aUnit    ( self unit isConvertibleTo: aUnit ) ifFalse: [ self error: Measure canNotConvertErrorMessage.].	^ Measure withAmount: (self convertAmountToUnit: aUnit) unit: aUnit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:52'!hash	^ self amount hash.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:35'!initializeWithAmount: anAmount unit: aUnit	amount := anAmount.	unit := aUnit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:00'!unit	^ unit.! !!MeasureBag class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:46'!with: aMeasureCollection 	^ self new initializeWith: aMeasureCollection.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:35'!+ anArithmeticMeasure	^ anArithmeticMeasure addMeasureBag: self.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:03'!= anotherObject	(super = anotherObject) ifFalse: [ ^ false ].	^ self measures = anotherObject measures.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:28'!addMeasure: aMeasure	self measures detect: [ :measure | measure unit isConvertibleTo: aMeasure unit ]		ifFound: [ :measure | self changeMeasure: measure with: measure + aMeasure. ]		ifNone: [ self measures add: aMeasure ].! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:32'!addMeasureBag: aMeasureBag 	^ aMeasureBag measures inject: self into: [ :newBag :measure | newBag addMeasure: measure ].! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:16'!changeMeasure: oldMeasure with: newMeasure	measures remove: oldMeasure; add: newMeasure.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:48'!initializeWith: aMeasureCollection	measures := aMeasureCollection asSet.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:47'!measures	^ measures! !!BaseUnit class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:23'!named: aUnitName	^ self new initializeWithName: aUnitName! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:29'!baseUnit	^ self.! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:53'!convertAmountFromBaseUnit: anAmount	^ anAmount.! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:17'!convertAmountToBaseUnit: anAmount	^ anAmount.! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:24'!initializeWithName: aUnitName	name := aUnitName.! !!DerivedUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:07'!baseUnit	^ baseUnit.! !!NonProportionalUnit class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:09'!named: aUnitName addition: aNumber baseUnit: aBaseUnit	^ self new initializeWithName: aUnitName addition: aNumber baseUnit: aBaseUnit.! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:08'!addition	^ addition! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:08'!convertAmountFromBaseUnit: anAmount	^ anAmount - self addition! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:08'!convertAmountToBaseUnit: anAmount	^ anAmount + self addition.! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:08'!initializeWithName: aUnitName addition: aNumber baseUnit: aBaseUnit	name := aUnitName.	addition := aNumber.	baseUnit := aBaseUnit.	! !!ProportionalUnit class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:36'!named: aUnitName factor: aFactor baseUnit: aBaseUnit	^ self new initializeWithName: aUnitName factor: aFactor baseUnit: aBaseUnit.! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:54'!convertAmountFromBaseUnit: anAmount 	^ anAmount / self factor.! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:21'!convertAmountToBaseUnit: anAmount	^ anAmount * self factor.! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:34'!factor	^ factor! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:36'!initializeWithName: aUnitName factor: aFactor baseUnit: aBaseUnit	name := aUnitName.	factor := aFactor.	baseUnit := aBaseUnit.	! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:08'!= anotherObject	^ self name = anotherObject name.! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:29'!baseUnit	self subclassResponsibility! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:52'!convertAmountFromBaseUnit: anAmount 	self subclassResponsibility .! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:17'!convertAmountToBaseUnit: anAmount	self subclassResponsibility! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:53'!hash	^ name hash.! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:04'!initializeWithName: aName	name := aName! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:33'!isConvertibleTo: aUnit 	^ self baseUnit = aUnit baseUnit.! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:03'!name	^ name.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:18'!celsius	^ self createNewNonProportionalUnitNamed: 'celsius' addition: 273.15 baseUnit: self kelvin! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:11'!centimeter	^ self createNewProportionalUnitNamed: 'centimeter' factor: 1/100 baseUnit: self meter.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 20:37'!createMeasureBagWithMeasures: aMeasureCollection 	^ MeasureBag with: aMeasureCollection.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 18:37'!createMeasureWithAmount: anAmount unit: aUnit 	^ Measure withAmount: anAmount unit: aUnit.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 18:25'!createNewBaseUnitNamed: aUnitName 	^ BaseUnit named: aUnitName.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 19:19'!createNewNonProportionalUnitNamed: aName addition: aNumber baseUnit: aBaseUnit 	^ NonProportionalUnit named: aName addition: aNumber baseUnit: aBaseUnit.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 19:11'!createNewProportionalUnitNamed: aUnitName factor: aFactor baseUnit: aBaseUnit	^ ProportionalUnit named: aUnitName factor: aFactor baseUnit: aBaseUnit.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:21'!dollar	^ self createNewBaseUnitNamed: 'dollar'.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:19'!kelvin	^ self createNewBaseUnitNamed: 'kelvin'! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:26'!liter	^ self createNewBaseUnitNamed: 'liter'.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:26'!meter	^ self createNewBaseUnitNamed: 'meter'.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:11'!millimeter	^ self createNewProportionalUnitNamed: 'millimeter' factor: 1/1000 baseUnit: self meter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:20'!oneCelsius	^ self createMeasureWithAmount: 1 unit: self celsius.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:20'!oneDollar	^ self createMeasureWithAmount: 1 unit: self dollar.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!oneHundredCentimeters	^ self createMeasureWithAmount: 100 unit: self centimeter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!oneLiter	^ self createMeasureWithAmount: 1 unit: self liter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!oneMeter	^ self createMeasureWithAmount: 1 unit: self meter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:36'!oneMeterPlusOneLiter	^ self createMeasureBagWithMeasures: { self oneMeter. self oneLiter }.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:30'!oneMeterPlusOneLiterPlusOneCelsiusPlusOneDolar	^ self createMeasureBagWithMeasures: { self oneMeter. self oneLiter. self oneCelsius. self oneDollar }! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:57'!oneMeterPlusTwoLiters	^ self createMeasureBagWithMeasures: { self oneMeter. self twoLiters }.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:56'!oneMeterPlusTwoLitersPlusThreeKelvin	^ self createMeasureBagWithMeasures: { self oneMeter. self twoLiters. self threeKelvin }.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:43'!oneThousandMillimeters	^ self createMeasureWithAmount: 1000 unit: self millimeter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:41'!testAddingAMeasureToABagWithAnExistingBaseUnitChangesItsAmount	self assert: self oneMeter + self oneLiter + self oneLiter = self oneMeterPlusTwoLiters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:20'!testAddingBaseToNonProportionalMeasuresOfSameBaseUnit	self assert: self zeroPointEightyFiveKelvin + self zeroCelsius  = self twoHundredAndSeventyFourKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:19'!testAddingBaseToProportionalMeasuresOfSameBaseUnit	self assert: self oneMeter + self oneHundredCentimeters  = self twoMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:40'!testAddingNewBaseUnitMeasureToBagExtendsTheBag	self assert: self oneMeter + self twoLiters + self threeKelvin = self oneMeterPlusTwoLitersPlusThreeKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:21'!testAddingNonProportionalToBaseMeasuresOfSameBaseUnit	self assert: self zeroCelsius + self zeroPointEightyFiveKelvin  = self twoHundredAndSeventyFourKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:20'!testAddingProportionalToBaseMeasuresOfSameBaseUnit	self assert: self oneHundredCentimeters + self oneMeter  = self twoMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:20'!testAddingTwoBaseMeasuresOfSameBaseUnit	self assert: self oneMeter + self oneMeter = self twoMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:41'!testAddingTwoDisjointMeasureBags	self assert: (self oneMeter + self oneLiter) + (self oneCelsius + self oneDollar) = self oneMeterPlusOneLiterPlusOneCelsiusPlusOneDolar.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:37'!testAddingTwoMeasuresWithDifferentBaseUnitCreatesABag	self assert: self oneMeter + self oneLiter = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:43'!testAddingTwoNotDisjointMeasureBagsCombineConvertibleMeasures	self assert: (self oneMeter + self oneLiter) + (self threeKelvin + self oneLiter) = self oneMeterPlusTwoLitersPlusThreeKelvin.! !!TestMeasure methodsFor: 'conversion tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:23'!testCanNotConvertMeasuresWithDifferentBaseUnit	self should: [ self oneMeter convertTo: self kelvin ] raise: Error description: Measure canNotConvertErrorMessage.! !!TestMeasure methodsFor: 'conversion tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:23'!testConvertingMeasuresWithSameBaseUnit	self assert: (self oneMeter convertTo: self centimeter) = self oneHundredCentimeters .! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 18:49'!testMeasureWithBaseUnitAndMeasureWithDerivedUnitRepresentingTheSameEntityAreEqual	self assert: self oneMeter = self oneHundredCentimeters.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 18:51'!testMeasureWithDerivedUnitAndMeasureWithBaseUnitRepresentingTheSameEntityAreEqual	self assert: self oneHundredCentimeters = self oneMeter.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 19:39'!testMeasuresRepresentingNothingAreNotEqualToMeasuresWithAmountZeroNotRepresentingNothing	self deny: self zeroMeters = self zeroCelsius.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:20'!testMeasuresWithDifferentAmountsAreNotEqual	self deny: self oneMeter = self twoMeters.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:21'!testMeasuresWithDifferentNotConvertibleUnitsAreNotEqual	self deny: self oneMeter = self oneLiter.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:22'!testNonMeasureObjectIsNotEqualToAMeasure	self deny: self oneMeter = 'wilkinson'.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 19:35'!testTwoBaseUnitMeasuresRepresentingNothingAreEqual	self assert: self zeroMeters = self zeroLiters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:38'!testTwoEqualMeasuresHaveTheSameHash	self assert: self oneMeter hash = self oneMeter hash.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:39'!testTwoEqualUnitsHaveTheSameHash	self assert: self meter hash = self meter hash.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:37'!testTwoMeasureBagsWithDifferentMeasuresAreNotEqual	self deny: self oneMeter + self twoLiters = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:38'!testTwoMeasureBagsWithSameMeasuresInDifferentOrderAreEqual	self assert: self oneMeter + self twoLiters = (self twoLiters + self oneMeter).! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 18:51'!testTwoMeasuresWithDerivedUnitsRepresentingTheSameEntityAreEqual	self assert: self oneThousandMillimeters = self oneHundredCentimeters.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:19'!testTwoNonIdenticalMeasuresRepresentingTheSameEntityAreEqual	|aMeter anotherMeter|	aMeter := self oneMeter.	anotherMeter := self oneMeter.		self deny: aMeter == anotherMeter.	self assert: aMeter = anotherMeter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:55'!threeKelvin	^ self createMeasureWithAmount: 3 unit: self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:02'!twoHundredAndSeventyFourKelvin	^ self createMeasureWithAmount: 274 unit: self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:46'!twoLiters	^ self createMeasureWithAmount: 2 unit: self liter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!twoMeters	^ self createMeasureWithAmount: 2 unit: self meter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:12'!zeroCelsius	^ self createMeasureWithAmount: 0 unit: self celsius.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:58'!zeroLiters	^ self createMeasureWithAmount: 0 unit: self liter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:58'!zeroMeters	^ self createMeasureWithAmount: 0 unit: self meter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:02'!zeroPointEightyFiveKelvin	^ self createMeasureWithAmount: 0.85  unit: self kelvin.! !"Measure"!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/30/2015 23:48'!test01		self assert: self oneMeter - self onemeter! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/30/2015 23:48' prior: 33638205!test01		self assert: self oneMeter - self onemeter = self zeroMeters . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/30/2015 23:49' prior: 33638363!test01		self assert: self oneMeter - self oneMeter = self zeroMeters . ! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/30/2015 23:49'!- aMeasure 	self shouldBeImplemented.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/30/2015 23:52' prior: 33638704!- aMeasure 	^ Measure withAmount: self amount - aMeasure amount  unit: self unit.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/30/2015 23:53'!test02	self assert: self oneMeter - self oneHundredCentimeters  = self zeroMeters . ! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/30/2015 23:55' prior: 33638848!- aMeasure 	^ Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/30/2015 23:58'!testSubtractingTwoBaseMeasuresOfSameBaseUnit		self assert: self oneMeter - self oneMeter = self zeroMeters . ! !TestMeasure removeSelector: #test01!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:00'!test03	self assert:  self oneHundredCentimeters -  self oneMeter    = self zeroMeters . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:00'!test04	self assert:  self oneHundredCentimeters -  self oneThousandMillimeters   = self zeroMeters . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:02' prior: 33639837!test04	self assert:  self oneKelvin -  self oneKelvin   = self zeroKelvins . ! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:02'!oneKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:02' prior: 33640218!oneKelvin	self createMeasureWithAmount: 1 unit: self kelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:03' prior: 33640364!oneKelvin	^ self createMeasureWithAmount: 1 unit: self kelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:03'!zeroKelvins	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:04' prior: 33640692!zeroKelvins	^ self createMeasureWithAmount: 0 unit: self kelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:04' prior: 33640046!test04	self halt.	self assert:  self oneKelvin -  self oneKelvin   = self zeroKelvins . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:07'!testSubtractingProportionalMeasureToBaseOfSameBaseUnit	self assert: self oneMeter - self oneHundredCentimeters  = self zeroMeters . ! !TestMeasure removeSelector: #test02!TestMeasure removeSelector: #test03!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:08' prior: 33641012!test04	self assert:  self oneKelvin -  self oneKelvin   = self zeroKelvins . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:10' prior: 33641509!test04	self assert: self twoHundredAndSeventyFourKelvin - self zeroPointEightyFiveKelvin = self zeroCelsius ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:12'!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyFourKelvin - self zeroCelsius =  self zeroPointEightyFiveKelvin! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:14' prior: 33641894!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyFourKelvin - self zeroCelsius =  self oneKelvin! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:14' prior: 33642159!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyFourKelvin - self zeroCelsius =  self oneKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:16' prior: 33642408!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyFourKelvin - self zeroCelsius =  self oneAndFifteenKelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:16'!oneAndFifteenKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:17' prior: 33642905!oneAndFifteenKelvin	^ Measure withAmount: 1.15 unit:  self kelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:18' prior: 33642658!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyFourKelvin - self zeroCelsius =  self zeroAndEightyFiveKelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:18'!zeroAndEightyFiveKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:18' prior: 33643486!zeroAndEightyFiveKelvin	^ Measure withAmount: 0.85 unit: self kelvin.! !TestMeasure removeSelector: #zeroAndEightyFiveKelvin!TestMeasure removeSelector: #oneAndFifteenKelvin!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:21' prior: 33643235!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyFourKelvin - self zeroCelsius =  self zeroPointEightyFiveKelvin.! !TestMeasure removeSelector: #test04!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:23'!testSubctractingNonProportionalToBaseMeasuresOfSameUni	self assert: self twoHundredAndSeventyThreeKelvin - self zeroCelsius =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:23' prior: 33643929!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreeKelvin - self zeroCelsius =  self zeroKelvin.! !TestMeasure removeSelector: #testSubctractingNonProportionalToBaseMeasuresOfSameUni!!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:23'!twoHundredAndSeventyThreeKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:24' prior: 33644793!twoHundredAndSeventyThreeKelvin	^ Measure withAmount: 273  unit:  self kelvin! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:24' prior: 33644961!twoHundredAndSeventyThreeKelvin	^ Measure withAmount: 273  unit:  self kelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:24'!zeroKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:24' prior: 33645322!zeroKelvin	^ Measure withAmount: 0 unit: self kelvin! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:24' prior: 33645469!zeroKelvin	^ Measure withAmount: 0 unit: self kelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:26'!twoHundredAndSeventyThreePointFifteenKelvin	^ Measure withAmount: 273.15  unit:  self kelvin.! !TestMeasure removeSelector: #twoHundredAndSeventyThreeKelvin!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:26' prior: 33644468!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreeKelvinPointFifteen - self zeroCelsius =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:26' prior: 33646044!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreeKelvinPointFifteenKelvin - self zeroCelsius =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:27' prior: 33646308!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreeKelvinPointFifteenKelvin - self zeroCelsius =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:27' prior: 33646578!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreePointFifteenKelvin - self zeroCelsius =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:28'!test05	self assert:  self oneThousandMillimeters - self oneMeter  = self zeroMeters . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:29' prior: 33646848!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self self zeroCelsius - self twoHundredAndSeventyThreePointFifteenKelvin =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:29'!test06	self assert: self self zeroCelsius - self twoHundredAndSeventyThreePointFifteenKelvin =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:30' prior: 33647290!testSubctractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreePointFifteenKelvin  - self zeroCelsius =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:30' prior: 33647543!test06	self assert: self zeroCelsius - self twoHundredAndSeventyThreePointFifteenKelvin =  self zeroKelvin.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:36' prior: 33639212!- aMeasure 	^ Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: (self unit BaseUnit convertTo: self unit).! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:36' prior: 33648242!- aMeasure 	^ Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: (self unit baseUnit convertTo: self unit).! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:37' prior: 33648495!- aMeasure 	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:39'!testSubtractingBaseToNonProportionalMeasuresWithSameBaseUnit	self assert: self zeroCelsius - self twoHundredAndSeventyThreePointFifteenKelvin =  self zeroKelvin.! !TestMeasure removeSelector: #test06!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:39'!testSubtractingBaseToProportionalMeasureWithSameBaseUnit	self assert:  self oneThousandMillimeters - self oneMeter  = self zeroMeters . ! !TestMeasure removeSelector: #test05!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:40'!testSubtractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreePointFifteenKelvin  - self zeroCelsius =  self zeroKelvin.! !TestMeasure removeSelector: #testSubctractingNonProportionalToBaseMeasuresOfSameUnit!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:40'!test01	self assert: self oneMeter - self oneLiter = self oneLiterAndOneMeter.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:40'!oneLiterAndOneMeter	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:42' prior: 33650050!oneLiterAndOneMeter	^ self createMeasureBagWithMeasures: { self oneMeter. self oneLiter }! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:42' prior: 33649878!test01self halt.	self assert: self oneMeter - self oneLiter = self oneLiterAndOneMeter.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:44' prior: 33648748!- aMeasure 	[ aMeasure unit isConvertibleTo: self unit ] ifFalse: [ ^ MeasureBag with: self ].	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:45' prior: 33650598!- aMeasure 	[ aMeasure unit isConvertibleTo: self unit ] ifFalse: [ ^ MeasureBag with: { self. aMeasure. } ].	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:45' prior: 33650403!test01	self assert: self oneMeter - self oneLiter = self oneLiterAndOneMeter.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:45' prior: 33650935!- aMeasure 	(aMeasure unit isConvertibleTo: self unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure. } ].	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:46' prior: 33651473!- aMeasure 	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:46' prior: 33651823!- aMeasure 	(aMeasure unit isConvertibleTo: self unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure. } ].	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:47' prior: 33651288!test01	self assert: self oneKelvin - self oneLiter = self oneLiterAndOneMeter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:49' prior: 33652428!test01	self assert: self oneMeter - self oneLiter = self oneLiterAndOneMeter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:50' prior: 33652615!test01	self assert: self oneMeter - self oneLiter = self oneMeterMinusOneLiter.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:50'!oneMeterMinusOneLiter	self shouldBeImplemented.! !TestMeasure removeSelector: #test01!!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:51' prior: 33652077!- aMeasure 		^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !"Measure"!----QUIT/NOSAVE----2015-05-31T00:51:43.609432-03:00 Pharo4.0.image priorSource: 64271!----STARTUP----2015-05-31T12:38:29.945107-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:58'!+ anArithmeticMeasure	self subclassResponsibility ! !!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:59'!= anotherObject	^ anotherObject isKindOf: ArithmeticMeasure.! !!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:31'!addMeasure: aMeasure	self subclassResponsibility ! !!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:31'!addMeasureBag: aMeasureBag	self subclassResponsibility ! !!Measure class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:14'!canNotConvertErrorMessage	^ 'Error while trying to convert.'! !!Measure class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:34'!withAmount: anAmount unit: aUnit 	^ self new initializeWithAmount: anAmount unit: aUnit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:34'!+ anArithmeticMeasure	^ anArithmeticMeasure addMeasure: self.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:51'!- aMeasure 		^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:03'!= anotherObject	(super = anotherObject) ifFalse: [ ^ false ].	(self convertAmountToBaseUnit = 0 and: [anotherObject convertAmountToBaseUnit = 0]) ifTrue: [ ^ true ].	^ self convertAmountToBaseUnit = anotherObject convertAmountToBaseUnit 		and: [self unit isConvertibleTo: anotherObject unit].! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:33'!addMeasure: aMeasure 	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure } ].	^ (Measure withAmount: self convertAmountToBaseUnit + (aMeasure convertAmountToBaseUnit )  unit: self unit baseUnit ) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:34'!addMeasureBag: aMeasureBag	^ aMeasureBag addMeasure: self.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 16:57'!amount	^ amount! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:15'!convertAmountToBaseUnit	^ self unit convertAmountToBaseUnit: (self amount).! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:52'!convertAmountToUnit: aUnit 	^ aUnit convertAmountFromBaseUnit: self convertAmountToBaseUnit ! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:15'!convertTo: aUnit    ( self unit isConvertibleTo: aUnit ) ifFalse: [ self error: Measure canNotConvertErrorMessage.].	^ Measure withAmount: (self convertAmountToUnit: aUnit) unit: aUnit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:52'!hash	^ self amount hash.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:35'!initializeWithAmount: anAmount unit: aUnit	amount := anAmount.	unit := aUnit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:00'!unit	^ unit.! !!MeasureBag class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:46'!with: aMeasureCollection 	^ self new initializeWith: aMeasureCollection.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:35'!+ anArithmeticMeasure	^ anArithmeticMeasure addMeasureBag: self.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:03'!= anotherObject	(super = anotherObject) ifFalse: [ ^ false ].	^ self measures = anotherObject measures.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:28'!addMeasure: aMeasure	self measures detect: [ :measure | measure unit isConvertibleTo: aMeasure unit ]		ifFound: [ :measure | self changeMeasure: measure with: measure + aMeasure. ]		ifNone: [ self measures add: aMeasure ].! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:32'!addMeasureBag: aMeasureBag 	^ aMeasureBag measures inject: self into: [ :newBag :measure | newBag addMeasure: measure ].! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 21:16'!changeMeasure: oldMeasure with: newMeasure	measures remove: oldMeasure; add: newMeasure.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:48'!initializeWith: aMeasureCollection	measures := aMeasureCollection asSet.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:47'!measures	^ measures! !!BaseUnit class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:23'!named: aUnitName	^ self new initializeWithName: aUnitName! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:29'!baseUnit	^ self.! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:53'!convertAmountFromBaseUnit: anAmount	^ anAmount.! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:17'!convertAmountToBaseUnit: anAmount	^ anAmount.! !!BaseUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:24'!initializeWithName: aUnitName	name := aUnitName.! !!DerivedUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:07'!baseUnit	^ baseUnit.! !!NonProportionalUnit class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:09'!named: aUnitName addition: aNumber baseUnit: aBaseUnit	^ self new initializeWithName: aUnitName addition: aNumber baseUnit: aBaseUnit.! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:08'!addition	^ addition! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:08'!convertAmountFromBaseUnit: anAmount	^ anAmount - self addition! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:08'!convertAmountToBaseUnit: anAmount	^ anAmount + self addition.! !!NonProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:08'!initializeWithName: aUnitName addition: aNumber baseUnit: aBaseUnit	name := aUnitName.	addition := aNumber.	baseUnit := aBaseUnit.	! !!ProportionalUnit class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:36'!named: aUnitName factor: aFactor baseUnit: aBaseUnit	^ self new initializeWithName: aUnitName factor: aFactor baseUnit: aBaseUnit.! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:54'!convertAmountFromBaseUnit: anAmount 	^ anAmount / self factor.! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:21'!convertAmountToBaseUnit: anAmount	^ anAmount * self factor.! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:34'!factor	^ factor! !!ProportionalUnit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:36'!initializeWithName: aUnitName factor: aFactor baseUnit: aBaseUnit	name := aUnitName.	factor := aFactor.	baseUnit := aBaseUnit.	! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:08'!= anotherObject	^ self name = anotherObject name.! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:29'!baseUnit	self subclassResponsibility! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 19:52'!convertAmountFromBaseUnit: anAmount 	self subclassResponsibility .! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:17'!convertAmountToBaseUnit: anAmount	self subclassResponsibility! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 20:53'!hash	^ name hash.! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:04'!initializeWithName: aName	name := aName! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 18:33'!isConvertibleTo: aUnit 	^ self baseUnit = aUnit baseUnit.! !!Unit methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/28/2015 17:03'!name	^ name.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:18'!celsius	^ self createNewNonProportionalUnitNamed: 'celsius' addition: 273.15 baseUnit: self kelvin! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:11'!centimeter	^ self createNewProportionalUnitNamed: 'centimeter' factor: 1/100 baseUnit: self meter.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 20:37'!createMeasureBagWithMeasures: aMeasureCollection 	^ MeasureBag with: aMeasureCollection.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 18:37'!createMeasureWithAmount: anAmount unit: aUnit 	^ Measure withAmount: anAmount unit: aUnit.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 18:25'!createNewBaseUnitNamed: aUnitName 	^ BaseUnit named: aUnitName.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 19:19'!createNewNonProportionalUnitNamed: aName addition: aNumber baseUnit: aBaseUnit 	^ NonProportionalUnit named: aName addition: aNumber baseUnit: aBaseUnit.! !!TestMeasure methodsFor: 'stub methods' stamp: 'ArtusoLeraRomero 5/28/2015 19:11'!createNewProportionalUnitNamed: aUnitName factor: aFactor baseUnit: aBaseUnit	^ ProportionalUnit named: aUnitName factor: aFactor baseUnit: aBaseUnit.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:21'!dollar	^ self createNewBaseUnitNamed: 'dollar'.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:19'!kelvin	^ self createNewBaseUnitNamed: 'kelvin'! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:26'!liter	^ self createNewBaseUnitNamed: 'liter'.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:26'!meter	^ self createNewBaseUnitNamed: 'meter'.! !!TestMeasure methodsFor: 'unit examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:11'!millimeter	^ self createNewProportionalUnitNamed: 'millimeter' factor: 1/1000 baseUnit: self meter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:20'!oneCelsius	^ self createMeasureWithAmount: 1 unit: self celsius.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:20'!oneDollar	^ self createMeasureWithAmount: 1 unit: self dollar.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!oneHundredCentimeters	^ self createMeasureWithAmount: 100 unit: self centimeter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/31/2015 00:03'!oneKelvin	^ self createMeasureWithAmount: 1 unit: self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!oneLiter	^ self createMeasureWithAmount: 1 unit: self liter.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:42'!oneLiterAndOneMeter	^ self createMeasureBagWithMeasures: { self oneMeter. self oneLiter }! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!oneMeter	^ self createMeasureWithAmount: 1 unit: self meter.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 00:50'!oneMeterMinusOneLiter	self shouldBeImplemented.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:36'!oneMeterPlusOneLiter	^ self createMeasureBagWithMeasures: { self oneMeter. self oneLiter }.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 21:30'!oneMeterPlusOneLiterPlusOneCelsiusPlusOneDolar	^ self createMeasureBagWithMeasures: { self oneMeter. self oneLiter. self oneCelsius. self oneDollar }! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:57'!oneMeterPlusTwoLiters	^ self createMeasureBagWithMeasures: { self oneMeter. self twoLiters }.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:56'!oneMeterPlusTwoLitersPlusThreeKelvin	^ self createMeasureBagWithMeasures: { self oneMeter. self twoLiters. self threeKelvin }.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:43'!oneThousandMillimeters	^ self createMeasureWithAmount: 1000 unit: self millimeter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:41'!testAddingAMeasureToABagWithAnExistingBaseUnitChangesItsAmount	self assert: self oneMeter + self oneLiter + self oneLiter = self oneMeterPlusTwoLiters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:20'!testAddingBaseToNonProportionalMeasuresOfSameBaseUnit	self assert: self zeroPointEightyFiveKelvin + self zeroCelsius  = self twoHundredAndSeventyFourKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:19'!testAddingBaseToProportionalMeasuresOfSameBaseUnit	self assert: self oneMeter + self oneHundredCentimeters  = self twoMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:40'!testAddingNewBaseUnitMeasureToBagExtendsTheBag	self assert: self oneMeter + self twoLiters + self threeKelvin = self oneMeterPlusTwoLitersPlusThreeKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:21'!testAddingNonProportionalToBaseMeasuresOfSameBaseUnit	self assert: self zeroCelsius + self zeroPointEightyFiveKelvin  = self twoHundredAndSeventyFourKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:20'!testAddingProportionalToBaseMeasuresOfSameBaseUnit	self assert: self oneHundredCentimeters + self oneMeter  = self twoMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:20'!testAddingTwoBaseMeasuresOfSameBaseUnit	self assert: self oneMeter + self oneMeter = self twoMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:41'!testAddingTwoDisjointMeasureBags	self assert: (self oneMeter + self oneLiter) + (self oneCelsius + self oneDollar) = self oneMeterPlusOneLiterPlusOneCelsiusPlusOneDolar.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:37'!testAddingTwoMeasuresWithDifferentBaseUnitCreatesABag	self assert: self oneMeter + self oneLiter = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:43'!testAddingTwoNotDisjointMeasureBagsCombineConvertibleMeasures	self assert: (self oneMeter + self oneLiter) + (self threeKelvin + self oneLiter) = self oneMeterPlusTwoLitersPlusThreeKelvin.! !!TestMeasure methodsFor: 'conversion tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:23'!testCanNotConvertMeasuresWithDifferentBaseUnit	self should: [ self oneMeter convertTo: self kelvin ] raise: Error description: Measure canNotConvertErrorMessage.! !!TestMeasure methodsFor: 'conversion tests' stamp: 'ArtusoLeraRomero 5/28/2015 20:23'!testConvertingMeasuresWithSameBaseUnit	self assert: (self oneMeter convertTo: self centimeter) = self oneHundredCentimeters .! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 18:49'!testMeasureWithBaseUnitAndMeasureWithDerivedUnitRepresentingTheSameEntityAreEqual	self assert: self oneMeter = self oneHundredCentimeters.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 18:51'!testMeasureWithDerivedUnitAndMeasureWithBaseUnitRepresentingTheSameEntityAreEqual	self assert: self oneHundredCentimeters = self oneMeter.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 19:39'!testMeasuresRepresentingNothingAreNotEqualToMeasuresWithAmountZeroNotRepresentingNothing	self deny: self zeroMeters = self zeroCelsius.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:20'!testMeasuresWithDifferentAmountsAreNotEqual	self deny: self oneMeter = self twoMeters.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:21'!testMeasuresWithDifferentNotConvertibleUnitsAreNotEqual	self deny: self oneMeter = self oneLiter.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:22'!testNonMeasureObjectIsNotEqualToAMeasure	self deny: self oneMeter = 'wilkinson'.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:39'!testSubtractingBaseToNonProportionalMeasuresWithSameBaseUnit	self assert: self zeroCelsius - self twoHundredAndSeventyThreePointFifteenKelvin =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:39'!testSubtractingBaseToProportionalMeasureWithSameBaseUnit	self assert:  self oneThousandMillimeters - self oneMeter  = self zeroMeters . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:40'!testSubtractingNonProportionalToBaseMeasuresOfSameUnit	self assert: self twoHundredAndSeventyThreePointFifteenKelvin  - self zeroCelsius =  self zeroKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 00:07'!testSubtractingProportionalMeasureToBaseOfSameBaseUnit	self assert: self oneMeter - self oneHundredCentimeters  = self zeroMeters . ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/30/2015 23:58'!testSubtractingTwoBaseMeasuresOfSameBaseUnit		self assert: self oneMeter - self oneMeter = self zeroMeters . ! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 19:35'!testTwoBaseUnitMeasuresRepresentingNothingAreEqual	self assert: self zeroMeters = self zeroLiters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:38'!testTwoEqualMeasuresHaveTheSameHash	self assert: self oneMeter hash = self oneMeter hash.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:39'!testTwoEqualUnitsHaveTheSameHash	self assert: self meter hash = self meter hash.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:37'!testTwoMeasureBagsWithDifferentMeasuresAreNotEqual	self deny: self oneMeter + self twoLiters = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/28/2015 21:38'!testTwoMeasureBagsWithSameMeasuresInDifferentOrderAreEqual	self assert: self oneMeter + self twoLiters = (self twoLiters + self oneMeter).! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 18:51'!testTwoMeasuresWithDerivedUnitsRepresentingTheSameEntityAreEqual	self assert: self oneThousandMillimeters = self oneHundredCentimeters.! !!TestMeasure methodsFor: 'equality tests' stamp: 'ArtusoLeraRomero 5/28/2015 17:19'!testTwoNonIdenticalMeasuresRepresentingTheSameEntityAreEqual	|aMeter anotherMeter|	aMeter := self oneMeter.	anotherMeter := self oneMeter.		self deny: aMeter == anotherMeter.	self assert: aMeter = anotherMeter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:55'!threeKelvin	^ self createMeasureWithAmount: 3 unit: self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:02'!twoHundredAndSeventyFourKelvin	^ self createMeasureWithAmount: 274 unit: self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/31/2015 00:26'!twoHundredAndSeventyThreePointFifteenKelvin	^ Measure withAmount: 273.15  unit:  self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:46'!twoLiters	^ self createMeasureWithAmount: 2 unit: self liter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:38'!twoMeters	^ self createMeasureWithAmount: 2 unit: self meter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 19:12'!zeroCelsius	^ self createMeasureWithAmount: 0 unit: self celsius.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/31/2015 00:24'!zeroKelvin	^ Measure withAmount: 0 unit: self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/31/2015 00:04'!zeroKelvins	^ self createMeasureWithAmount: 0 unit: self kelvin.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:58'!zeroLiters	^ self createMeasureWithAmount: 0 unit: self liter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 18:58'!zeroMeters	^ self createMeasureWithAmount: 0 unit: self meter.! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/28/2015 20:02'!zeroPointEightyFiveKelvin	^ self createMeasureWithAmount: 0.85  unit: self kelvin.! !"Measure"!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 12:41'!test01 	self assert: self oneMeter - self oneLiter  = self oneMeterAndMinusOneLiter.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:41'!oneMeterAndMinusOneLiter	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:42' prior: 33675184!oneMeterAndMinusOneLiter	self createMeasureBagWithMeasures: {  self oneMeter. self minusOneLiter. }! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:42'!minusOneLiter	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:43' prior: 33675539!minusOneLiter	self createMeasureWithAmount: -1 unit: self liter. ! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:46' prior: 33654727!- aMeasure 	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure negated } ].	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:46'!negated	self shouldBeImplemented.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:46' prior: 33676202!negated	self amount negated.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:47' prior: 33675345!oneMeterAndMinusOneLiter	^ self createMeasureBagWithMeasures: {  self oneMeter. self minusOneLiter. }! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:48' prior: 33675689!minusOneLiter	^ self createMeasureWithAmount: -1 unit: self liter. ! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:53' prior: 33676342!negated	^ Measure withAmount: self amount negated unit: self unit..! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:53' prior: 33676867!negated	^ Measure withAmount: self amount negated unit: self unit.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 12:54'!test02 	self assert: self oneMeter - self oneLiter  = self oneLiter - self oneMeter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 12:54' prior: 33677199!test02 	self assert: self oneMeter - self oneLiter  = (self oneLiter - self oneMeter).! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 12:55' prior: 33677391!test02 	self deny: self oneMeter - self oneLiter  = (self oneLiter - self oneMeter).! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 12:57'!test03 	self deny: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterAndMinusOneLiterAndMinusOneKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 12:58'!test04	self deny: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterAndMinusOneKelvinAndMinusOneLiter.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:58'!- aMeasure 	self shouldBeImplemented.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:59' prior: 33678178!- aMeasure 	^ self addMeasure: aMeasure negated.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 12:59'!oneMeterAndMinusOneLiterAndMinusOneKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:00' prior: 33678468!oneMeterAndMinusOneLiterAndMinusOneKelvin	^ self createMeasureBagWithMeasures: { self oneMeter. self minusOneLiter. self minusOneKelvin. }! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:00'!minusOneKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:00' prior: 33678879!minusOneKelvin	^ self createMeasureWithAmount: -1 unit: self kelvin. ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:02' prior: 33677761!test03 	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterAndMinusOneLiterAndMinusOneKelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:02'!oneMeterAndMinusOneKelvinAndMinusOneLiter	self shouldBeImplemented.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:02' prior: 33677969!test04	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterAndMinusOneKelvinAndMinusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:03' prior: 33675005!test01 	self assert: self oneMeter - self oneLiter  = self oneMeterMinusOneLiter.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:04'!oneMeterMinusOneKelvinMinusOneLiter	self shouldBeImplemented.! !TestMeasure removeSelector: #oneMeterAndMinusOneKelvinAndMinusOneLiter!!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:04'!oneMeterMinusOneLiterMinusOneKelvin	^ self createMeasureBagWithMeasures: { self oneMeter. self minusOneLiter. self minusOneKelvin. }! !TestMeasure removeSelector: #oneMeterAndMinusOneLiterAndMinusOneKelvin!TestMeasure removeSelector: #oneMeterAndMinusOneLiter!!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/31/2015 13:04' prior: 33665368!oneMeterMinusOneLiter	self createMeasureBagWithMeasures: { self oneMeter. self minusOneLiter. }! !TestMeasure removeSelector: #oneLiterAndOneMeter!!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/31/2015 13:06' prior: 33680594!oneMeterMinusOneLiter	^self createMeasureBagWithMeasures: { self oneMeter. self minusOneLiter. }! !!TestMeasure methodsFor: 'measure examples' stamp: 'ArtusoLeraRomero 5/31/2015 13:06' prior: 33680848!oneMeterMinusOneLiter	^ self createMeasureBagWithMeasures: { self oneMeter. self minusOneLiter. }! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:06' prior: 33679207!test03 	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterMinusOneLiterMinusOneKelvin.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:06'!tes	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterMinusOneKelvinMinusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:06' prior: 33679595!test04	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterMinusOneKelvinMinusOneLiter.! !TestMeasure removeSelector: #tes!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:07' prior: 33681257!test03 	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterMinusOneLiterMinusOneKelvin.	self assert: self oneMeter - self oneKelvin - self oneLiter = self oneMeterMinusOneLiterMinusOneKelvin.! !TestMeasure removeSelector: #test04!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:08'!test04	self assert: self twoMeters - self oneLiter - self oneMeter = self oneMeterMinusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:09'!test05	self assert: self twoMeters - self oneLiter - self oneHundredCentimeters  = self oneMeterMinusOneLiter.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:15' prior: 33678325!- aMeasure 	self measures detect: [ :measure | measure unit isConvertibleTo: aMeasure unit]		ifFound: [ :measure | self changeMeasure: measure  with: measure - aMeasure ]		ifNone: [ self measures add: aMeasure negated ]		 ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:17'!test06	self assert: (self oneMeter - self oneLiter) - (self oneDollar - self oneKelvin) = self oneMeterMinusOneLiterPlusOneKelvinPlusOneDollar.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:20'!testSubtractionIsNotCommutative 	self deny: self oneMeter - self oneLiter  = (self oneLiter - self oneMeter).! !TestMeasure removeSelector: #test02!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:23'!test02	self assert: self oneMeter - self oneHundredCentimeters   = self zeroMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:23' prior: 33681931!test03 	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterMinusOneLiterMinusOneKelvin.	! !TestMeasure removeSelector: #test04!TestMeasure removeSelector: #test06!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 13:27'!test06	self assert: self oneMeter - (self oneLiter - self oneKelvin ) = self oneMeterPlusOneLiterPlusOneKelvin.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:28'!subtractMeasure: aMeasure	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure negated } ].	^ (Measure withAmount: self convertAmountToBaseUnit - aMeasure convertAmountToBaseUnit unit: self unit baseUnit) convertTo: self unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:31' prior: 33675861!- anArithmeticMeasure	anArithmeticMeasure negated addMeasure: self.! !Measure removeSelector: #subtractMeasure:!!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:36' prior: 33682686!- anArithmeticMeasure	^ anArithmeticMeasure negated addMeasureBag: self.	 ! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:43' prior: 33684524!- anArithmeticMeasure	^ anArithmeticMeasure negated addMeasure: self.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 13:54'!negated	self shouldBeImplemented.! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 5/31/2015 13:59' prior: 33616580!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 14:03' prior: 33685090!negated| measures_negated |	measures_negated := Set new.	measures do: [ :measure | measures_negated add: measure negated. ].	^ MeasureBag  with: measures_negated  ! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 14:03'!oneMeterPlusOneLiterPlusOneKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 14:04' prior: 33685921!oneMeterPlusOneLiterPlusOneKelvin	^ self createMeasureBagWithMeasures: {  self oneMeter. self oneLiter. self oneKelvin }! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:04' prior: 33683951!test06	self assert: self oneMeter - (self oneLiter - self oneKelvin ) = self oneMeterMinusOneLiterPlusOneKelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 14:04'!oneMeterMinusOneLiterPlusOneKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 14:05' prior: 33686526!oneMeterMinusOneLiterPlusOneKelvin	^ self createMeasureBagWithMeasures: { self oneMeter. self minusOneLiter. self oneKelvin }! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:06' prior: 33682466!test05	self assert: self zeroMeters + self oneLiter + self oneHundredCentimeters  = self oneMeterMinusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:06' prior: 33686930!test05	self assert: self zeroMeters + self oneLiter + self oneHundredCentimeters  = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:08' prior: 33687149!test05	self assert: self zeroMeters + self oneHundredCentimeters  = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:09' prior: 33687367!test05	self assert: self zeroMeters + self oneHundredCentimeters  = self oneMeter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:09' prior: 33687569!test05	self assert: self zeroMeters + self oneLiter + self oneHundredCentimeters  = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:12'!testPRUEBA	self assert: self zeroMeters + self  oneHundredCentimeters = self zeroMeters.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:12' prior: 33687961!testPRUEBA	self assert: self zeroMeters + self  oneHundredCentimeters = self oneMeter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 14:13' prior: 33688157!testPRUEBA	self assert: self  oneHundredCentimeters + self zeroMeters   = self oneMeter.! !!MeasureBag methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 14:51' prior: 33657499!addMeasure: aMeasure	self measures detect: [ :measure | measure unit isConvertibleTo: aMeasure unit ]		ifFound: [ :measure | self changeMeasure: measure with: aMeasure + measure. ]		ifNone: [ self measures add: aMeasure ].! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 14:57' prior: 33655352!addMeasure: aMeasure 	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure } ].	^ (Measure withAmount: self convertAmountToBaseUnit + (aMeasure convertAmountToBaseUnit )  unit: self unit baseUnit ) convertTo: aMeasure unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:01' prior: 33688880!addMeasure: aMeasure 	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure } ].	^ (Measure withAmount: self convertAmountToBaseUnit + (aMeasure convertAmountToBaseUnit )  unit: self unit baseUnit ) convertTo: self unit.! !"Measure"!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:10' prior: 33687759!test05	self assert: self zeroMeters - self oneLiter - self oneHundredCentimeters  = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:11'!test07	self assert: self zeroMeters + self oneLiter + self oneHundredCentimeters  = self oneMeterPlusOneLiter.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:11' prior: 33689248!addMeasure: aMeasure 	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure } ].	^ (Measure withAmount: self convertAmountToBaseUnit + (aMeasure convertAmountToBaseUnit )  unit: self unit baseUnit ) convertTo: aMeasure unit.! !!Measure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:11' prior: 33690044!addMeasure: aMeasure 	(self unit isConvertibleTo: aMeasure unit) ifFalse: [ ^ MeasureBag with: { self. aMeasure } ].	^ (Measure withAmount: self convertAmountToBaseUnit + (aMeasure convertAmountToBaseUnit )  unit: self unit baseUnit ) convertTo: self unit.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:12' prior: 33689625!test05	self assert: self twoMeters - self oneLiter - self oneHundredCentimeters  = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:13' prior: 33690777!test05	self assert: self twoMeters - self oneLiter - self oneHundredCentimeters  = self oneMeterMinusOneLiter.! !!ArithmeticMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:14'!- anArithmeticMeasure	self subclassResponsibility ! !TestMeasure removeSelector: #testPRUEBA!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:16'!test08	self assert: self oneMeter - (self oneLiter - self oneHundredCentimeters  ) = self oneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:17' prior: 33691389!test08	self assert: self oneMeter - (self oneLiter - self oneHundredCentimeters  ) = self minusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:17' prior: 33691596!test08	self assert: self oneMeter - (self oneHundredCentimeters - self oneLiter  ) = self oneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:31'!test09	self assert: ( self oneMeter - self oneLiter ) - (self oneDollar - self oneKelvin  ) = self oneMeterMinusOneLiterMinusOneDollarPlusOneKelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:31'!oneMeterMinusOneLiterMinusOneDollarPlusOneKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:32' prior: 33692242!oneMeterMinusOneLiterMinusOneDollarPlusOneKelvin	^ self createMeasureBagWithMeasures: {  self oneMeter. self minusOneLiter. self minusOneDollar. self oneKelvin. }! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:32'!minusOneDollar	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:32' prior: 33692684!minusOneDollar	^ self createMeasureWithAmount: -1  unit: self dollar. ! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:35'!test10	self assert: ( self oneMeter - self oneLiter ) - (self oneHundredCentimeters - self oneKelvin  ) = self minusOneLiterPlusOneKelvin.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:35'!minusOneLiterPlusOneKelvin	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:35' prior: 33693230!minusOneLiterPlusOneKelvin	^ self createMeasureBagWithMeasures: { self minusOneLiter. self oneKelvin.  }! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:37' prior: 33668380!testAddingTwoMeasuresWithDifferentBaseUnitCreatesABag 	self assert: self oneMeter - self oneLiter  = self oneMeterMinusOneLiter.! !TestMeasure removeSelector: #test01!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:38' prior: 33693605!testAddingTwoMeasuresWithDifferentBaseUnitCreatesABag 	self assert: self oneMeter + self oneLiter  = self oneMeterPlusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:38'!testSubtractingTwoMeasuresWithDifferentBaseUnitCreatesABag 	self assert: self oneMeter - self oneLiter  = self oneMeterMinusOneLiter.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:40'!testSubtractingProportionalMeasureFromBaseOfSameBaseUnit	self assert: self oneMeter - self oneHundredCentimeters   = self zeroMeters.! !TestMeasure removeSelector: #test02!TestMeasure removeSelector: #testSubtractingProportionalMeasureFromBaseOfSameBaseUnit!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:43'!testSubtractingMeasureToABagWithNonExistingBaseUnit 	self assert: self oneMeter - self oneLiter - self oneKelvin  = self oneMeterMinusOneLiterMinusOneKelvin.	! !TestMeasure removeSelector: #test03!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:44'!testSubtractingAMeasureToABagWithAnExistingBaseUnitChangeItsAmount	self assert: self twoMeters - self oneLiter - self oneHundredCentimeters  = self oneMeterMinusOneLiter.! !TestMeasure removeSelector: #test05!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:45'!testSubtractingABagToAMeasureExtendsTheBag	self assert: self oneMeter - (self oneLiter - self oneKelvin ) = self oneMeterMinusOneLiterPlusOneKelvin.! !TestMeasure removeSelector: #test06!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:46'!testSubtractingABagToAMeasureWithExistingBaseUnitChangeItsAmount	self assert: self zeroMeters + self oneLiter + self oneHundredCentimeters  = self oneMeterPlusOneLiter.! !TestMeasure removeSelector: #test07!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:48' prior: 33666508!testAddingAMeasureToABagWithAnExistingBaseUnitChangesItsAmount	self assert: self oneMeter + self oneLiter + self oneHundredCentiliters = self oneMeterPlusTwoLiters.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:49'!oneHundredCentiliters	self shouldBeImplemented.! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:49' prior: 33695855!testAddingAMeasureToABagWithAnExistingBaseUnitChangesItsAmount	self assert: self oneMeter + self oneLiter + self oneHundredCentimeters  = self twoMetersPlusOneLiter.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:49'!twoMetersPlusOneLiter	self shouldBeImplemented.! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:50' prior: 33696529!twoMetersPlusOneLiter	self createMeasureBagWithMeasures: { self twoMeters . self oneLiter }! !!TestMeasure methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:50' prior: 33696687!twoMetersPlusOneLiter	^self createMeasureBagWithMeasures: { self twoMeters . self oneLiter }! !!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:51' prior: 33695541!testSubtractingABagToAMeasureWithExistingBaseUnitChangeItsAmount	self assert: self oneMeter - (self oneHundredCentimeters - self oneLiter  ) = self oneLiter.! !TestMeasure removeSelector: #test08!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:52'!testSubtractingTwoDisjointMeasuresBags	self assert: ( self oneMeter - self oneLiter ) - (self oneDollar - self oneKelvin  ) = self oneMeterMinusOneLiterMinusOneDollarPlusOneKelvin.! !TestMeasure removeSelector: #test09!!TestMeasure methodsFor: 'arithmetic tests' stamp: 'ArtusoLeraRomero 5/31/2015 15:53'!testSubtractingTwoNotDisjointMeasuresBagsCombineConvertibleMeasures	self assert: ( self oneMeter - self oneLiter ) - (self oneHundredCentimeters - self oneKelvin  ) = self minusOneLiterPlusOneKelvin.! !TestMeasure removeSelector: #test10!!Object methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 5/31/2015 15:53'!measures	self shouldBeImplemented.! !"Measure"!----QUIT/NOSAVE----2015-05-31T22:47:18.725132-03:00 Pharo4.0.image priorSource: 64271!----STARTUP----2015-06-14T18:23:18.196988-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!mensajeDeErrorElMerchantProcessorEstaCaido	^ 'No se pudo comunicar con el merchant processor. Esta caido.'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 20:10'!mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio	^ 'No se puede realizar la venta porque el carrito está vacío'.! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 17:06'!mensajeDeErrorTarjetaRobada	^ 'La tarjeta con la que se intento pagar es robada.'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 19:19'!mensajeDeErrorTarjetaSinSaldo	^ 'La tarjeta no tiene saldo'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!mensajeDeErrorTarjetaVencida	^ 'No se puede realizar la venta porque la tarjeta está vencida.'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:41'!registraVentasEn: unLibroDeVentas pagaA: unMerchantProcessor	^ self new inicializarCon: unLibroDeVentas pagaA: unMerchantProcessor.! !!Cajero methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:41'!inicializarCon: unLibroDeVentas pagaA: unMerchantProcessor	libroDeVentas := unLibroDeVentas.	merchantProcessor := unMerchantProcessor.! !!Cajero methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:07'!libroDeVentas	^ libroDeVentas copy.! !!Cajero methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!realizarVenta: unCarrito conTarjeta: unaTarjeta en: unaFecha	unCarrito estaVacio ifTrue: [self error: Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio].	(unaTarjeta estaVencidaEn: unaFecha) ifTrue: [self error: Cajero mensajeDeErrorTarjetaVencida].		merchantProcessor cobrar: unCarrito total a: unaTarjeta.		libroDeVentas add: (Venta con: unCarrito productos total: unCarrito total).! !!Carrito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 17:55'!con: unCatalogo	^ self new inicializarCon: unCatalogo.! !!Carrito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 17:46'!mensajeDeErrorProductoNoSeEncuentraEnElCatalogo	^ 'No se puede agregar un producto que no está en el catálogo.'! !!Carrito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 20:00'!mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos	^ 'Solo se puede agregar una cantidad entera positiva de productos.'! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:55'!agregar: unaCantidad de: unProducto	(catalogo includesKey: unProducto) ifFalse: [ self error: Carrito mensajeDeErrorProductoNoSeEncuentraEnElCatalogo ].	unaCantidad < 1 ifTrue: [ self error: Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos ].	productos add: unProducto withOccurrences: unaCantidad.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 18:32'!cantidadDe: unProducto 	^ productos occurrencesOf: unProducto.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 20:06'!estaVacio	^ productos isEmpty.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 17:55'!inicializarCon: unCatalogo	catalogo := unCatalogo.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/2/2015 21:45'!initialize	super initialize.	productos := Bag new.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:11'!productos	^ productos copy.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:59'!total	^ productos inject: 0 into: [ :acum :producto | acum + (catalogo at: producto) ].! !!MerchantProcessorStub class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!alCobrarHacer: unBloque	^ self new inicializarConBloqueDeCobro: unBloque.! !!MerchantProcessorStub methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:16'!cobrar: unMonto a: unaTarjeta	^ bloqueDeCobro cull: unMonto cull: unaTarjeta.! !!MerchantProcessorStub methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!inicializarConBloqueDeCobro: unBloque	bloqueDeCobro := unBloque.! !!MesDeAño class methodsFor: 'as yet unclassified'!mes: unMes año: unAño 	^ self new inicializarConMes: unMes año: unAño.! !!MesDeAño methodsFor: 'as yet unclassified'!año	^ año copy! !!MesDeAño methodsFor: 'as yet unclassified'!inicializarConMes: unMes año: unAño	mes := unMes.	año := unAño.! !!MesDeAño methodsFor: 'as yet unclassified'!mes	^ mes copy! !!Tarjeta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 17:54'!vigenteHasta: unMesDeAño	^ self new inicializarConVigencia: unMesDeAño.! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 18:04'!estaVencidaEn: unaFecha	^ mesDeAñoDeVigencia año < unaFecha year or: [ mesDeAñoDeVigencia año = unaFecha year and: [ mesDeAñoDeVigencia mes < unaFecha monthIndex]].! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 17:54'!inicializarConVigencia: unMesDeAño 	mesDeAñoDeVigencia := unMesDeAño.! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:09'!conRegistroDeClientes: unRegistroDeClientes catalogo: unCatalogo	^ self new inicializarConRegistroDeClientes: unRegistroDeClientes catalogo: unCatalogo.! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:21'!mensajeDeErrorIdCarritoInexistente	^ 'El ID no está asociado a ningún carrito.'! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:09'!mensajeDeErrorUsuarioOClaveInvalidos	^ 'El usuario o la contraseña son incorrectos'! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:20'!cantidadDeCarritos	^ carritosPorCarritoId size.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:19'!carritoConId: unIdCarrito	carritosPorCarritoId at: unIdCarrito 		ifPresent: [ :carrito | ^ carrito ]		ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente].! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:29'!dueñoDelCarritoConId: unCarritoId	^  clienteIdPorCarritoId at: unCarritoId			ifPresent: [ :clienteId | ^ clienteId ]			ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente ].! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:39'!inicializarConRegistroDeClientes: unRegistroDeClientes catalogo: unCatalogo	registroDeClientesId := unRegistroDeClientes.	carritosPorCarritoId := Dictionary new.	clienteIdPorCarritoId := Dictionary new.	catalogo := unCatalogo.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:43'!nuevoCarritoParaClienteConID: unClienteId conClave: unaClave	| nuevoCarrito nuevoCarritoId |	registroDeClientesId at: unClienteId 		ifPresent: [ :clave | clave = unaClave ifFalse: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos ] ]		ifAbsent: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos ].		nuevoCarritoId := carritosPorCarritoId size.	nuevoCarrito := Carrito con: catalogo.	carritosPorCarritoId at: nuevoCarritoId put: nuevoCarrito.	clienteIdPorCarritoId at: nuevoCarritoId put: unClienteId.		^ nuevoCarritoId.! !!Venta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!con: unaColeccionDeProductos total: unMonto	^ self new inicializarCon: unaColeccionDeProductos total: unMonto.! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!inicializarCon: unaColeccionDeProductos total: unMonto	productos := unaColeccionDeProductos.	total := unMonto.! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!productos	^ productos copy.! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!total	^ total.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:50'!abrilDel2010	^ MesDeAño mes: 4 año: 2010.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!carritoConDosBestiario	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnBestiario.	^ unCarrito.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!carritoConTresDeRayuela	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 3 de: self isbnRayuela.	^ unCarrito.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!carritoVacioConCatalogoDeCortazar	^Carrito con: self catalogoCortazar.		 	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 16:56'!catalogoCortazar	^ Dictionary newFromPairs: {self isbnRayuela. 2. self isbnCronopios. 3. self isbnFinalDelJuego. 4. self isbnBestiario. 5.}.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 18:02'!cincoDeNoviembreDel2007	^ Date newDay: 5 month: 11 year: 2007.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 18:01'!isbnBestiario	^4.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 18:00'!isbnCronopios	^2.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 17:50'!isbnDeOtraEditorial	^-1		 	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 18:00'!isbnFinalDelJuego	^3.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/2/2015 21:44'!isbnRayuela	^ 1.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:50'!junioDel1994	^ MesDeAño mes: 6 año: 1994.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 20:54'!libroDeVentasVacio	^ OrderedCollection new.! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!merchantProcessorCaido	^ MerchantProcessorStub alCobrarHacer: [ self error: Cajero mensajeDeErrorElMerchantProcessorEstaCaido ].! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:15'!merchantProcessorTarjetaAceptada	^ MerchantProcessorStub alCobrarHacer: [ ].! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:15'!merchantProcessorTarjetaRobada	^ MerchantProcessorStub alCobrarHacer: [ self error: Cajero mensajeDeErrorTarjetaRobada ].! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:15'!merchantProcessorTarjetaSinSaldo	^ MerchantProcessorStub alCobrarHacer: [ self error: Cajero mensajeDeErrorTarjetaSinSaldo ].! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:51'!octubreDel2020	^ MesDeAño mes: 10 año: 2020.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:49'!tarjetaVenceEnAbrilDel2010	^ Tarjeta vigenteHasta: self abrilDel2010.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:49'!tarjetaVenceEnJunioDel1994	^ Tarjeta vigenteHasta: self junioDel1994.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:50'!tarjetaVenceEnOctubreDel2020	^ Tarjeta vigenteHasta: self octubreDel2020.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/11/2015 21:43'!test01	| unTito |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	self should: [unTito nuevoCarritoParaClienteConID: 'jorge' conClave: '123']		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unTito cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/11/2015 21:45'!test02	| unTito |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	self should: [unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '456']		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unTito cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/11/2015 21:45'!test03	| unTito unIdCarrito |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unIdCarrito := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123'.		self assert: unTito cantidadDeCarritos = 1.	self assert: (unTito carritoConId: unIdCarrito) estaVacio.	self assert: (unTito dueñoDelCarritoConId: unIdCarrito) = 'pepe'.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNoSePuedeAgregarCantidadesNegativasDeUnProductoAUnCarrito	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	self should: [unCarrito agregar: -1 de: self isbnRayuela]			raise: Exception 			withExceptionDo: [ :excepcion | 				self assert: excepcion messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos.				self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.				].! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNoSePuedeAgregarCeroDeUnProductoAUnCarrito	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	self should: [unCarrito agregar: 0 de: self isbnRayuela]			raise: Exception 			withExceptionDo: [ :excepcion | 				self assert: excepcion messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos.				self assert: unCarrito estaVacio.				].! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNoSePuedeAgregarUnProductoQueNoEsteEnElCatalogo 	self should: [self carritoVacioConCatalogoDeCortazar agregar: 1 de: self isbnDeOtraEditorial. ] 			  	raise: Exception			withExceptionDo: [ :excepcion | self assert: excepcion messageText = Carrito mensajeDeErrorProductoNoSeEncuentraEnElCatalogo. ]					 		 	! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testNoSePuedeRealizarVentaConTarjetaVencidaHaceAños	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 1 month: 1 year: 1998) ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unCajero libroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testNoSePuedeRealizarVentaConTarjetaVencidaHaceUnDia	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 1 month: 7 year: 1994) ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unCajero libroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testNoSePuedeRealizarVentaDeUnCarritoVacio	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoVacioConCatalogoDeCortazar conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.			self assert: unCajero libroDeVentas isEmpty ]! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNuevoCarritoEstaVacio	self assert: self carritoVacioConCatalogoDeCortazar estaVacio.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!testSePuedeRealizarVentaConTarjetaHastaElUltimoDiaDeVigencia	| unCajero unLibroDeVentas |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 30 month: 6 year: 1994) .		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 1.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoSoloUnProductoAUnCarritoEsteNoContieneOtroDistinto	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 4 de: self isbnRayuela.	self deny: (unCarrito cantidadDe: self isbnBestiario) > 0.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoUnProductoDelCatalogoAUnCarritoNoEstaVacio	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar .	unCarrito agregar: 1 de: self isbnRayuela.	self deny: unCarrito estaVacio.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoUnaCantidadDeUnProductoAUnCarritoEsteContieneEsaCantidad	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoUnaCantidadDeUnProductoAUnCarritoYLuegoMasElCarritoContieneLaSumaDeLasCantidades	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 3 de: self isbnRayuela.	unCarrito agregar: 5 de: self isbnRayuela.	self assert: (unCarrito cantidadDe: self isbnRayuela) = 8.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoXDeUnProductoZDeOtroAUnCarritoEsteContieneXDelPrimeroZDelSegundo	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	unCarrito agregar: 4 de: self isbnBestiario .	self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.	self assert: (unCarrito cantidadDe: self isbnBestiario) = 4.	self assert: (unCarrito productos occurrencesOf: self isbnRayuela) = 2.	self assert: (unCarrito productos occurrencesOf: self isbnBestiario) = 4.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!testSiRealizoMuchasVentasEstasAparecenEnElLibro	| unCajero unLibroDeVentas |		unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007.	unCajero realizarVenta: self carritoConDosBestiario conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007.		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 2.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.		self assert: (unLibroDeVentas at: 2) productos = self carritoConDosBestiario productos.	self assert: (unLibroDeVentas at: 2) total = self carritoConDosBestiario total.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testSiRealizoUnaVentaEstaApareceEnElLibro	| unCajero unLibroDeVentas |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007.		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 1.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSoloSePuedeAgregarCantidadesEnterasDeUnProductoAUnCarrito	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	self should: [unCarrito agregar: 0.5 de: self isbnRayuela]			raise: Exception 			withExceptionDo: [ :excepcion | 				self assert: excepcion messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos.				self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.				].! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 16:59'!testUnCarritoConVariosProductosCalculaElTotalCorrectamente	| unCarrito unCatalogo totalCarrito |	unCatalogo := Dictionary newFromPairs: { self isbnRayuela. 2.50. self isbnBestiario. 10. }.	unCarrito := Carrito con: unCatalogo.	unCarrito agregar: 2 de: self isbnRayuela.	unCarrito agregar: 4 de: self isbnBestiario.		totalCarrito := 2 * (unCatalogo at: self isbnRayuela) + (4 * (unCatalogo at: self isbnBestiario)).	self assert: unCarrito total = totalCarrito.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testUnCarritoVacioTieneTotalCero	self assert: self carritoVacioConCatalogoDeCortazar total = 0.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:28'!testVentaATarjetaVencidaConMerchantProcessorCaidoFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorCaido.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testVentaATarjetaVencidaRobadaFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaRobada.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testVentaATarjetaVencidaSinSaldoFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaSinSaldo.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:27'!testVentaATarjetaVigenteConMerchantProcessorCaidoFallaInformandoQueElMerchantProcessorEstaCaido	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorCaido.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorElMerchantProcessorEstaCaido.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testVentaATarjetaVigenteRobadaFallaInformandoQueFueRobada	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaRobada.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnAbrilDel2010 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaRobada.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testVentaATarjetaVigenteSinSaldoFallaInformandoQueNoTieneSaldo	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaSinSaldo .		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaSinSaldo.			self assert: unLibroDeVentas isEmpty ].! !"TusLibros"!----STARTUP----2015-06-15T22:12:04.158679-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!mensajeDeErrorElMerchantProcessorEstaCaido	^ 'No se pudo comunicar con el merchant processor. Esta caido.'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 20:10'!mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio	^ 'No se puede realizar la venta porque el carrito está vacío'.! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 17:06'!mensajeDeErrorTarjetaRobada	^ 'La tarjeta con la que se intento pagar es robada.'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 19:19'!mensajeDeErrorTarjetaSinSaldo	^ 'La tarjeta no tiene saldo'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!mensajeDeErrorTarjetaVencida	^ 'No se puede realizar la venta porque la tarjeta está vencida.'! !!Cajero class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:41'!registraVentasEn: unLibroDeVentas pagaA: unMerchantProcessor	^ self new inicializarCon: unLibroDeVentas pagaA: unMerchantProcessor.! !!Cajero methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:41'!inicializarCon: unLibroDeVentas pagaA: unMerchantProcessor	libroDeVentas := unLibroDeVentas.	merchantProcessor := unMerchantProcessor.! !!Cajero methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:07'!libroDeVentas	^ libroDeVentas copy.! !!Cajero methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!realizarVenta: unCarrito conTarjeta: unaTarjeta en: unaFecha	unCarrito estaVacio ifTrue: [self error: Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio].	(unaTarjeta estaVencidaEn: unaFecha) ifTrue: [self error: Cajero mensajeDeErrorTarjetaVencida].		merchantProcessor cobrar: unCarrito total a: unaTarjeta.		libroDeVentas add: (Venta con: unCarrito productos total: unCarrito total).! !!Carrito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 17:55'!con: unCatalogo	^ self new inicializarCon: unCatalogo.! !!Carrito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 17:46'!mensajeDeErrorProductoNoSeEncuentraEnElCatalogo	^ 'No se puede agregar un producto que no está en el catálogo.'! !!Carrito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 20:00'!mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos	^ 'Solo se puede agregar una cantidad entera positiva de productos.'! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:55'!agregar: unaCantidad de: unProducto	(catalogo includesKey: unProducto) ifFalse: [ self error: Carrito mensajeDeErrorProductoNoSeEncuentraEnElCatalogo ].	unaCantidad < 1 ifTrue: [ self error: Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos ].	productos add: unProducto withOccurrences: unaCantidad.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 18:32'!cantidadDe: unProducto 	^ productos occurrencesOf: unProducto.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 20:06'!estaVacio	^ productos isEmpty.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 17:55'!inicializarCon: unCatalogo	catalogo := unCatalogo.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/2/2015 21:45'!initialize	super initialize.	productos := Bag new.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:11'!productos	^ productos copy.! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 16:59'!total	^ productos inject: 0 into: [ :acum :producto | acum + (catalogo at: producto) ].! !!MerchantProcessorStub class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!alCobrarHacer: unBloque	^ self new inicializarConBloqueDeCobro: unBloque.! !!MerchantProcessorStub methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:16'!cobrar: unMonto a: unaTarjeta	^ bloqueDeCobro cull: unMonto cull: unaTarjeta.! !!MerchantProcessorStub methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!inicializarConBloqueDeCobro: unBloque	bloqueDeCobro := unBloque.! !!MesDeAño class methodsFor: 'as yet unclassified'!mes: unMes año: unAño 	^ self new inicializarConMes: unMes año: unAño.! !!MesDeAño methodsFor: 'as yet unclassified'!año	^ año copy! !!MesDeAño methodsFor: 'as yet unclassified'!inicializarConMes: unMes año: unAño	mes := unMes.	año := unAño.! !!MesDeAño methodsFor: 'as yet unclassified'!mes	^ mes copy! !!Tarjeta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 17:54'!vigenteHasta: unMesDeAño	^ self new inicializarConVigencia: unMesDeAño.! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 18:04'!estaVencidaEn: unaFecha	^ mesDeAñoDeVigencia año < unaFecha year or: [ mesDeAñoDeVigencia año = unaFecha year and: [ mesDeAñoDeVigencia mes < unaFecha monthIndex]].! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 17:54'!inicializarConVigencia: unMesDeAño 	mesDeAñoDeVigencia := unMesDeAño.! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:09'!conRegistroDeClientes: unRegistroDeClientes catalogo: unCatalogo	^ self new inicializarConRegistroDeClientes: unRegistroDeClientes catalogo: unCatalogo.! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 18:16'!mensajeDeErrorCarritoExpirado	^ 'El carrito ya ha expirado'! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:21'!mensajeDeErrorIdCarritoInexistente	^ 'El ID no está asociado a ningún carrito.'! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:09'!mensajeDeErrorUsuarioOClaveInvalidos	^ 'El usuario o la contraseña son incorrectos'! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:20'!cantidadDeCarritos	^ carritosPorCarritoId size.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:19'!carritoConId: unIdCarrito	carritosPorCarritoId at: unIdCarrito 		ifPresent: [ :carrito | ^ carrito ]		ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente].! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 18:20'!carritoConId: unIdCarrito enMomento: unMomento	(self expiroCarritoConId: unIdCarrito en: unMomento) ifTrue: [ self error: Tito mensajeDeErrorCarritoExpirado ].	carritosPorCarritoId at: unIdCarrito 		ifPresent: [ :carrito | ^ carrito ]		ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente].! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:29'!dueñoDelCarritoConId: unCarritoId	^  clienteIdPorCarritoId at: unCarritoId			ifPresent: [ :clienteId | ^ clienteId ]			ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente ].! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 18:31'!expiroCarritoConId: unIdCarrito en: unMomento	|  ultimoUso |	ultimoUso := ultimoUsoPorCarritoId at: unIdCarrito.	^ ultimoUso < unMomento.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 18:14'!inicializarConRegistroDeClientes: unRegistroDeClientes catalogo: unCatalogo	registroDeClientes := unRegistroDeClientes.	carritosPorCarritoId := Dictionary new.	clienteIdPorCarritoId := Dictionary new.	catalogo := unCatalogo.	ultimoUsoPorCarritoId := Dictionary new.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 18:14'!nuevoCarritoParaClienteConID: unClienteId conClave: unaClave enMomento: unMomento	| nuevoCarrito nuevoCarritoId |	registroDeClientes at: unClienteId 		ifPresent: [ :clave | clave = unaClave ifFalse: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos ] ]		ifAbsent: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos ].		nuevoCarritoId := carritosPorCarritoId size.	nuevoCarrito := Carrito con: catalogo.	carritosPorCarritoId at: nuevoCarritoId put: nuevoCarrito.	clienteIdPorCarritoId at: nuevoCarritoId put: unClienteId.	ultimoUsoPorCarritoId at: nuevoCarritoId put: unMomento.		^ nuevoCarritoId.! !!Venta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!con: unaColeccionDeProductos total: unMonto	^ self new inicializarCon: unaColeccionDeProductos total: unMonto.! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!inicializarCon: unaColeccionDeProductos total: unMonto	productos := unaColeccionDeProductos.	total := unMonto.! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!productos	^ productos copy.! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/4/2015 21:12'!total	^ total.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:50'!abrilDel2010	^ MesDeAño mes: 4 año: 2010.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!carritoConDosBestiario	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnBestiario.	^ unCarrito.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!carritoConTresDeRayuela	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 3 de: self isbnRayuela.	^ unCarrito.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!carritoVacioConCatalogoDeCortazar	^Carrito con: self catalogoCortazar.		 	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 16:56'!catalogoCortazar	^ Dictionary newFromPairs: {self isbnRayuela. 2. self isbnCronopios. 3. self isbnFinalDelJuego. 4. self isbnBestiario. 5.}.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 18:02'!cincoDeNoviembreDel2007	^ Date newDay: 5 month: 11 year: 2007.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 18:01'!isbnBestiario	^4.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 18:00'!isbnCronopios	^2.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 17:50'!isbnDeOtraEditorial	^-1		 	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 18:00'!isbnFinalDelJuego	^3.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/2/2015 21:44'!isbnRayuela	^ 1.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:50'!junioDel1994	^ MesDeAño mes: 6 año: 1994.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/4/2015 20:54'!libroDeVentasVacio	^ OrderedCollection new.! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!merchantProcessorCaido	^ MerchantProcessorStub alCobrarHacer: [ self error: Cajero mensajeDeErrorElMerchantProcessorEstaCaido ].! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:15'!merchantProcessorTarjetaAceptada	^ MerchantProcessorStub alCobrarHacer: [ ].! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:15'!merchantProcessorTarjetaRobada	^ MerchantProcessorStub alCobrarHacer: [ self error: Cajero mensajeDeErrorTarjetaRobada ].! !!TestsTusLibros methodsFor: 'stubs' stamp: 'ArtusoLeraRomero 6/11/2015 20:15'!merchantProcessorTarjetaSinSaldo	^ MerchantProcessorStub alCobrarHacer: [ self error: Cajero mensajeDeErrorTarjetaSinSaldo ].! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:51'!octubreDel2020	^ MesDeAño mes: 10 año: 2020.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:49'!tarjetaVenceEnAbrilDel2010	^ Tarjeta vigenteHasta: self abrilDel2010.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:49'!tarjetaVenceEnJunioDel1994	^ Tarjeta vigenteHasta: self junioDel1994.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/11/2015 17:50'!tarjetaVenceEnOctubreDel2020	^ Tarjeta vigenteHasta: self octubreDel2020.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 18:30'!test01	| unTito unCarritoId |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.		self should: [ unTito carritoConId: unCarritoId enMomento: DateAndTime tomorrow ]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 18:15'!testAlCrearDosCarritosDeDistintosClientesTienenDistintoID	| unTito idCarritoPepe idCarritoJuan |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } ) catalogo: self catalogoCortazar.		idCarritoPepe := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: Date today.	idCarritoJuan := unTito nuevoCarritoParaClienteConID: 'juan' conClave: '456' enMomento: Date today.		self assert: unTito cantidadDeCarritos = 2.	self deny: idCarritoPepe = idCarritoJuan.		self assert: (unTito carritoConId: idCarritoPepe) estaVacio.	self assert: (unTito dueñoDelCarritoConId: idCarritoPepe) = 'pepe'.		self assert: (unTito carritoConId: idCarritoJuan) estaVacio.	self assert: (unTito dueñoDelCarritoConId: idCarritoJuan) = 'juan'.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 18:15'!testAlCrearDosCarritosDelMismoClienteTienenDistintoID	| unTito unIdCarrito otroIdCarrito |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unIdCarrito := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: Date today.	otroIdCarrito := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: Date today.		self assert: unTito cantidadDeCarritos = 2.	self deny: unIdCarrito = otroIdCarrito.	self assert: (unTito carritoConId: unIdCarrito) estaVacio.	self assert: (unTito dueñoDelCarritoConId: unIdCarrito) = 'pepe'.		self assert: (unTito carritoConId: otroIdCarrito) estaVacio.	self assert: (unTito dueñoDelCarritoConId: otroIdCarrito) = 'pepe'.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 18:15'!testAlCrearUnCarritoEstaVacioYSeAsociaSuCliente	| unTito unIdCarrito |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unIdCarrito := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: Date today.		self assert: unTito cantidadDeCarritos = 1.	self assert: (unTito carritoConId: unIdCarrito) estaVacio.	self assert: (unTito dueñoDelCarritoConId: unIdCarrito) = 'pepe'.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNoSePuedeAgregarCantidadesNegativasDeUnProductoAUnCarrito	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	self should: [unCarrito agregar: -1 de: self isbnRayuela]			raise: Exception 			withExceptionDo: [ :excepcion | 				self assert: excepcion messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos.				self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.				].! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNoSePuedeAgregarCeroDeUnProductoAUnCarrito	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	self should: [unCarrito agregar: 0 de: self isbnRayuela]			raise: Exception 			withExceptionDo: [ :excepcion | 				self assert: excepcion messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos.				self assert: unCarrito estaVacio.				].! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNoSePuedeAgregarUnProductoQueNoEsteEnElCatalogo 	self should: [self carritoVacioConCatalogoDeCortazar agregar: 1 de: self isbnDeOtraEditorial. ] 			  	raise: Exception			withExceptionDo: [ :excepcion | self assert: excepcion messageText = Carrito mensajeDeErrorProductoNoSeEncuentraEnElCatalogo. ]					 		 	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 18:15'!testNoSePuedeCrearCarritoConUsuarioExistenteYClaveInvalida	| unTito |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	self should: [unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '456' enMomento: Date today]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unTito cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 18:15'!testNoSePuedeCrearCarritoDeClienteInexistente	| unTito |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	self should: [unTito nuevoCarritoParaClienteConID: 'jorge' conClave: '123' enMomento: Date today]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unTito cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testNoSePuedeRealizarVentaConTarjetaVencidaHaceAños	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 1 month: 1 year: 1998) ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unCajero libroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testNoSePuedeRealizarVentaConTarjetaVencidaHaceUnDia	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 1 month: 7 year: 1994) ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unCajero libroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testNoSePuedeRealizarVentaDeUnCarritoVacio	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoVacioConCatalogoDeCortazar conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.			self assert: unCajero libroDeVentas isEmpty ]! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testNuevoCarritoEstaVacio	self assert: self carritoVacioConCatalogoDeCortazar estaVacio.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!testSePuedeRealizarVentaConTarjetaHastaElUltimoDiaDeVigencia	| unCajero unLibroDeVentas |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 30 month: 6 year: 1994) .		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 1.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoSoloUnProductoAUnCarritoEsteNoContieneOtroDistinto	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 4 de: self isbnRayuela.	self deny: (unCarrito cantidadDe: self isbnBestiario) > 0.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoUnProductoDelCatalogoAUnCarritoNoEstaVacio	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar .	unCarrito agregar: 1 de: self isbnRayuela.	self deny: unCarrito estaVacio.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoUnaCantidadDeUnProductoAUnCarritoEsteContieneEsaCantidad	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoUnaCantidadDeUnProductoAUnCarritoYLuegoMasElCarritoContieneLaSumaDeLasCantidades	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 3 de: self isbnRayuela.	unCarrito agregar: 5 de: self isbnRayuela.	self assert: (unCarrito cantidadDe: self isbnRayuela) = 8.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSiAgregoXDeUnProductoZDeOtroAUnCarritoEsteContieneXDelPrimeroZDelSegundo	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	unCarrito agregar: 4 de: self isbnBestiario .	self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.	self assert: (unCarrito cantidadDe: self isbnBestiario) = 4.	self assert: (unCarrito productos occurrencesOf: self isbnRayuela) = 2.	self assert: (unCarrito productos occurrencesOf: self isbnBestiario) = 4.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:13'!testSiRealizoMuchasVentasEstasAparecenEnElLibro	| unCajero unLibroDeVentas |		unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007.	unCajero realizarVenta: self carritoConDosBestiario conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007.		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 2.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.		self assert: (unLibroDeVentas at: 2) productos = self carritoConDosBestiario productos.	self assert: (unLibroDeVentas at: 2) total = self carritoConDosBestiario total.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testSiRealizoUnaVentaEstaApareceEnElLibro	| unCajero unLibroDeVentas |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: self cincoDeNoviembreDel2007.		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 1.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testSoloSePuedeAgregarCantidadesEnterasDeUnProductoAUnCarrito	| unCarrito |	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito agregar: 2 de: self isbnRayuela.	self should: [unCarrito agregar: 0.5 de: self isbnRayuela]			raise: Exception 			withExceptionDo: [ :excepcion | 				self assert: excepcion messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos.				self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.				].! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 16:59'!testUnCarritoConVariosProductosCalculaElTotalCorrectamente	| unCarrito unCatalogo totalCarrito |	unCatalogo := Dictionary newFromPairs: { self isbnRayuela. 2.50. self isbnBestiario. 10. }.	unCarrito := Carrito con: unCatalogo.	unCarrito agregar: 2 de: self isbnRayuela.	unCarrito agregar: 4 de: self isbnBestiario.		totalCarrito := 2 * (unCatalogo at: self isbnRayuela) + (4 * (unCatalogo at: self isbnBestiario)).	self assert: unCarrito total = totalCarrito.! !!TestsTusLibros methodsFor: 'tests carrito' stamp: 'ArtusoLeraRomero 6/11/2015 17:00'!testUnCarritoVacioTieneTotalCero	self assert: self carritoVacioConCatalogoDeCortazar total = 0.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:28'!testVentaATarjetaVencidaConMerchantProcessorCaidoFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorCaido.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testVentaATarjetaVencidaRobadaFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaRobada.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:25'!testVentaATarjetaVencidaSinSaldoFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaSinSaldo.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:27'!testVentaATarjetaVigenteConMerchantProcessorCaidoFallaInformandoQueElMerchantProcessorEstaCaido	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorCaido.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorElMerchantProcessorEstaCaido.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testVentaATarjetaVigenteRobadaFallaInformandoQueFueRobada	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaRobada.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnAbrilDel2010 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaRobada.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/11/2015 20:14'!testVentaATarjetaVigenteSinSaldoFallaInformandoQueNoTieneSaldo	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaSinSaldo .		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaSinSaldo.			self assert: unLibroDeVentas isEmpty ].! !"TusLibros"!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 22:41'!listarProductosDeCarritoConId: unIdCarrito	carritosPorCarritoId at: unIdCarrito 		ifPresent: [ :carrito | ^ carrito productos ]		ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:44'!test02	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: unTito listarProductosDeCarritoConId: unCarritoId  = Bag new. ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:44' prior: 33754021!test02	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: (unTito listarProductosDeCarritoConId: unCarritoId  = Bag new). ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:45' prior: 33754494!test02	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self halt.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId  = Bag new). ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:47' prior: 33754969!test02	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self halt.	self assert: ((unTito listarProductosDeCarritoConId: unCarritoId) = Bag new). ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:47' prior: 33755456!test02	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: ((unTito listarProductosDeCarritoConId: unCarritoId) = Bag new). ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:47' prior: 33755944!test02	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) = Bag new. ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:49'!test03	|unTito unCarritoIdInvalido unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.	unaBagVacia := Bag new. 				self assert: (unTito listarProductosDeCarritoConId: unCarritoIdInvalido ) = Bag new. ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:51' prior: 33756878!test03	|unTito unCarritoIdInvalido unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.	unaBagVacia := Bag new. 			self should: [ unTito listarProductosDeCarritoConId: unCarritoIdInvalido ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:51' prior: 33757294!test03	|unTito unCarritoIdInvalido unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.	unaBagVacia := Bag new. 			self should: [ unTito listarProductosDeCarritoConId: unCarritoIdInvalido ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 22:52'!test04	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) = Bag new. ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 22:58'!agregarProductoACarrito! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 22:59'!agregarACarritoConID! !Tito removeSelector: #agregarProductoACarrito!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 22:59'!agregarACarritoConID: unCarritoId producto: unProducto cantidad: unaCantidad! !Tito removeSelector: #agregarACarritoConID!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:00' prior: 33759039!agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad	carritosPorCarritoId at: unIdCarrito 		ifPresent: [ :carrito | ^ carrito productos ]		ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente].! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:01' prior: 33759264!agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad	carritosPorCarritoId at: unIdCarrito 		ifPresent: [ :carrito | ^ carrito agregar: unaCantidad de: unProducto]		ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:02' prior: 33758316!test04	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: False! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:03'!testListarLosProductosDeUnCarrioVacioEsUnBagVacio	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) = Bag new. ! !TestsTusLibros removeSelector: #test02!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:04'!testNoSePuedenListarLosProductosDeUnCarritoIdInexistente	|unTito unCarritoIdInvalido unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.	unaBagVacia := Bag new. 			self should: [ unTito listarProductosDeCarritoConId: unCarritoIdInvalido ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ].! !TestsTusLibros removeSelector: #test03!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:06'!testListasProductosDeUnCarritoQueAgregaUnasCosasYLuegoOtrasEsUnaBagConLaSumaDeAmbas	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: False! !TestsTusLibros removeSelector: #test04!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:06'!testListarProductosDeUnCarritoQueAgregaUnasCosasYLuegoOtrasEsUnaBagConLaSumaDeAmbas	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: False! !TestsTusLibros removeSelector: #testListasProductosDeUnCarritoQueAgregaUnasCosasYLuegoOtrasEsUnaBagConLaSumaDeAmbas!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:07'!test02	|unTito unCarritoIdInvalido|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.		self should: [ unTito agregarACarritoConID: unCarritoIdInvalido  producto:  self isbnRayuela  cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:09' prior: 33762609!test02	|unTito unCarritoIdInvalido|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.		self should: [ unTito agregarACarritoConID: unCarritoIdInvalido  producto:  self isbnRayuela  cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:12'!testNoSePuedeAgregarProductosAUnCarritoConIdInvalido	|unTito unCarritoIdInvalido|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.		self should: [ unTito agregarACarritoConID: unCarritoIdInvalido  producto:  self isbnRayuela  cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.  ].! !TestsTusLibros removeSelector: #test02!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:19'!testNoSePuedeAgregarProductosQueNoEstenEnElCatalogo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := -1.		self should: [ unTito agregarACarritoConID: unCarritoId  producto:  self isbnRayuela  cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:19' prior: 33764214!testNoSePuedeAgregarProductosQueNoEstenEnElCatalogo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..		self should: [ unTito agregarACarritoConID: unCarritoId  producto:  self isbnRayuela  cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:20' prior: 33764752!testNoSePuedeAgregarProductosQueNoEstenEnElCatalogo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..		self should: [ unTito agregarACarritoConID: unCarritoId  producto:  self isbnDeOtraEditorial   cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:20' prior: 33765379!testNoSePuedeAgregarProductosQueNoEstenEnElCatalogo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..		self should: [ unTito agregarACarritoConID: unCarritoId  producto:  self isbnDeOtraEditorial   cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Carrito mensajeDeErrorProductoNoSeEncuentraEnElCatalogo .  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:21'!testNoSePuedeAgregarProductosConCantidadesNoPositivas	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..		self should: [ unTito agregarACarritoConID: unCarritoId  producto:  self isbnRayuela    cantidad: 0 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos  .  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:22'!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..		self should: [ unTito agregarACarritoConID: unCarritoId  producto:  self isbnRayuela    cantidad: 0 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos  .  ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:24' prior: 33767307!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		self assert: unTito carritoConId: unCarritoId  = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:24' prior: 33768006!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		self assert: (unTito carritoConId: unCarritoId)  = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:24' prior: 33768607!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self halt.	self assert: (unTito carritoConId: unCarritoId)  = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:29' prior: 33769210!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self halt.	self assert: ((unTito carritoConId: unCarritoId )productos)  = self carritoConTresDeRayuela productos.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:29' prior: 33769823!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self assert: ((unTito carritoConId: unCarritoId )catalogo)  = self carritoConTresDeRayuela catalogo.		! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:32'!= unCarrito	self productos = unCarrito productos and: [ self catalogo = unCarrito catalogo ].	! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:33'!catalogo	^ catalogo! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:33' prior: 33770458!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self assert: (unTito carritoConId: unCarritoId )  = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:34' prior: 33771376!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self halt.	self assert: (unTito carritoConId: unCarritoId )  = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:35' prior: 33771979!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current..	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self assert: (unTito carritoConId: unCarritoId )  = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:36' prior: 33772593!testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self assert: (unTito carritoConId: unCarritoId ) = self carritoConTresDeRayuela.		! !!Carrito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:38' prior: 33771067!= unCarrito	^ self productos = unCarrito productos and: [ self catalogo = unCarrito catalogo ].	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:47' prior: 33762014!testListarProductosDeUnCarritoQueAgregaUnasCosasYLuegoOtrasEsUnaBagConLaSumaDeAmbas	| unTito unCarritoId unaBagConResultadoEsperado |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	unTito agregarACarritoConID: unCarritoId  producto: self isbnCronopios cantidad: 3.	unaBagConResultadoEsperado := self bagCon5DeRayuelaY3DeCronopios.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId ) = unaBagConResultadoEsperado .! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:47'!bagCon5DeRayuelaY3DeCronopios	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:48' prior: 33774790!bagCon5DeRayuelaY3DeCronopios	^ { self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnCronopios . self isbnCronopios . self isbnCronopios }! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:49' prior: 33773999!testListarProductosDeUnCarritoQueAgregaUnasCosasYLuegoOtrasEsUnaBagConLaSumaDeAmbas	| unTito unCarritoId |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	unTito agregarACarritoConID: unCarritoId  producto: self isbnCronopios cantidad: 3.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId ) =  self bagCon5DeRayuelaY3DeCronopios.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:50' prior: 33774959!bagCon5DeRayuelaY3DeCronopios	^ Bag newFrom:{ self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnCronopios . self isbnCronopios . self isbnCronopios }! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:50' prior: 33775975!bagCon5DeRayuelaY3DeCronopios	^ Bag newFrom: { self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnCronopios . self isbnCronopios . self isbnCronopios }! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:52'!testListarProductosDeUnCarritoQueAgregaProductosCreaUnaBagConLosNuevosProductos	| unTito unCarritoId |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	unTito agregarACarritoConID: unCarritoId  producto: self isbnCronopios cantidad: 3.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId ) =  self bagCon5DeRayuelaY3DeCronopios.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:52' prior: 33776584!testListarProductosDeUnCarritoQueAgregaProductosCreaUnaBagConLosNuevosProductos	| unTito unCarritoId |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId ) =  self bagCon5DeRayuela.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:52'!bagCon5DeRayuela	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 23:52' prior: 33777894!bagCon5DeRayuela	^ Bag newFrom: { self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela . self isbnRayuela .  }! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:54'!testListarProductosDeUnCarritoAlQueLeAgregaronProductosEnDosTandasDistintasListaLaSumaDeEllos	| unTito unCarritoId |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	unTito agregarACarritoConID: unCarritoId  producto: self isbnCronopios cantidad: 3.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId ) =  self bagCon5DeRayuelaY3DeCronopios.! !TestsTusLibros removeSelector: #testListarProductosDeUnCarritoQueAgregaUnasCosasYLuegoOtrasEsUnaBagConLaSumaDeAmbas!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:54'!testListarProductosDeUnCarritoAlQueLeAgregaronProductosListaEsosProductos	| unTito unCarritoId |	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId ) =  self bagCon5DeRayuela.! !TestsTusLibros removeSelector: #testListarProductosDeUnCarritoQueAgregaProductosCreaUnaBagConLosNuevosProductos!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:58'!testNoSePuedenAgregarProductosAUnCarritoConIdInexistente	|unTito unCarritoIdInvalido|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoIdInvalido := -1.		self should: [ unTito agregarACarritoConID: unCarritoIdInvalido  producto:  self isbnRayuela  cantidad: 2 ]	raise: Error	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.  ].! !TestsTusLibros removeSelector: #testNoSePuedeAgregarProductosAUnCarritoConIdInvalido!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/15/2015 23:59'!testListarProductosDeUnCarrioEsUnaEstructuraVacia	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) = Bag new. ! !TestsTusLibros removeSelector: #testListarLosProductosDeUnCarrioVacioEsUnBagVacio!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 00:00'!testListarProductosDeUnCarritoRetornaUnaEstructuraVacia	| unTito unCarritoId unaBagVacia|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unaBagVacia := Bag new. 	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) = Bag new. ! !TestsTusLibros removeSelector: #testListarProductosDeUnCarrioEsUnaEstructuraVacia!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 00:03'!testAgregarProductosAUnCarritoModificaLosProductosDeEseCarrito	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self assert: (unTito carritoConId: unCarritoId ) = self carritoConTresDeRayuela.		! !TestsTusLibros removeSelector: #testAgregarProductosValidosConCantidadesValidasAUnCarritoValidoModificaEsteUltimo!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 00:06'!testAgregarProductosAUnCarritoEnDosTandasDejaAlCarritoConLaSumaDeAmbasTandas	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios  cantidad: 5.	self assert: (unTito carritoConId: unCarritoId ) = self carritoConTresDeRayuelaYDosDeCronopios.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 00:06' prior: 33782288!testAgregarProductosAUnCarritoEnDosTandasDejaAlCarritoConLaSumaDeAmbasTandas	|unTito unCarritoId|	unTito := Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123' } ) catalogo: self catalogoCortazar.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' enMomento: DateAndTime current.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.	self assert: (unTito carritoConId: unCarritoId ) = self carritoConTresDeRayuelaYDosDeCronopios.		! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 00:07'!carritoConTresDeRayuelaYDosDeCronopios	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 00:09' prior: 33783671!carritoConTresDeRayuelaYDosDeCronopios	| unCarrito | 	unCarrito := self carritoVacioConCatalogoDeCortazar.	unCarrito  agregar: 3 de: self isbnRayuela .	unCarrito  agregar: 2 de: self isbnCronopios .	^unCarrito! !"TusLibros"!----SNAPSHOT----2015-06-16T00:19:23.820949-03:00 Pharo4.0.image priorSource: 64271!----QUIT/NOSAVE----2015-06-16T00:19:35.712956-03:00 Pharo4.0.image priorSource: 229648!----STARTUP----2015-06-16T16:04:45.199926-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!TestsTusLibros methodsFor: 'tests helpers' stamp: 'ArtusoLeraRomero 6/16/2015 15:31'!carritoConId: unCarritoId tieneComoDueñoA: unDueño estaVacioEn: unTito 	^ (unTito carritoConId: unCarritoId) estaVacio and: [ (unTito dueñoDelCarritoConId: unCarritoId) = unDueño ].! !!TestsTusLibros methodsFor: 'tests helpers' stamp: 'ArtusoLeraRomero 6/16/2015 15:26'!crearCarritoParaJuanEn: unTito	^ unTito nuevoCarritoParaClienteConID: 'juan' conClave: '456'.! !!TestsTusLibros methodsFor: 'tests helpers' stamp: 'ArtusoLeraRomero 6/16/2015 15:22'!crearCarritoParaPepeEn: unTito	^ unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123'.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 14:20'!cuatroDeAbrilDel2010ALas1150	^ DateAndTime year: 2010 month: 4 day: 4 hour: 11 minute: 50.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 14:08'!cuatroDeAbrilDel2010ALas1200	^ DateAndTime year: 2010 month: 4 day: 4 hour: 12 minute: 0.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 14:08'!cuatroDeAbrilDel2010ALas1215	^ DateAndTime year: 2010 month: 4 day: 4 hour: 12 minute: 15.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 14:08'!cuatroDeAbrilDel2010ALas1230	^ DateAndTime year: 2010 month: 4 day: 4 hour: 12 minute: 30.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 14:09'!cuatroDeAbrilDel2010ALas1230YUnSegundo	^ DateAndTime year: 2010 month: 4 day: 4 hour: 12 minute: 30 second: 1.! !!TestsTusLibros methodsFor: 'tests helpers' stamp: 'ArtusoLeraRomero 6/16/2015 15:38'!fallaPorCarritoExpiradoCuandoHago: unBloque	self should: [ unBloque value ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Tito mensajeDeErrorCarritoExpirado.].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:23' prior: 33782983!testAgregarProductosAUnCarritoEnDosTandasDejaAlCarritoConLaSumaDeAmbasTandas	|unTito unCarritoId|	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unTito.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.	self assert: (unTito carritoConId: unCarritoId) = self carritoConTresDeRayuelaYDosDeCronopios.	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:25' prior: 33781607!testAgregarProductosAUnCarritoModificaLosProductosDeEseCarrito	|unTito unCarritoId|	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unTito.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self assert: (unTito carritoConId: unCarritoId) = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:32' prior: 33737382!testAlCrearDosCarritosDeDistintosClientesTienenDistintoID	| unTito idCarritoPepe idCarritoJuan |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	idCarritoPepe := self crearCarritoParaPepeEn: unTito.	idCarritoJuan := self crearCarritoParaJuanEn: unTito.		self assert: unTito cantidadDeCarritos = 2.	self deny: idCarritoPepe = idCarritoJuan.		self assert: (self carritoConId: idCarritoPepe tieneComoDueñoA: 'pepe' estaVacioEn: unTito).	self assert: (self carritoConId: idCarritoJuan tieneComoDueñoA: 'juan' estaVacioEn: unTito).! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:32' prior: 33738261!testAlCrearDosCarritosDelMismoClienteTienenDistintoID	| unTito unIdCarrito otroIdCarrito |		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unIdCarrito := self crearCarritoParaPepeEn: unTito.	otroIdCarrito := self crearCarritoParaPepeEn: unTito.		self assert: unTito cantidadDeCarritos = 2.	self deny: unIdCarrito = otroIdCarrito.		self assert: (self carritoConId: unIdCarrito tieneComoDueñoA: 'pepe' estaVacioEn: unTito).	self assert: (self carritoConId: otroIdCarrito tieneComoDueñoA: 'pepe' estaVacioEn: unTito).	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:32' prior: 33739107!testAlCrearUnCarritoEstaVacioYSeAsociaSuCliente	| unTito unIdCarrito |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unIdCarrito := self crearCarritoParaPepeEn: unTito.		self assert: unTito cantidadDeCarritos = 1.	self assert: (self carritoConId: unIdCarrito tieneComoDueñoA: 'pepe' estaVacioEn: unTito).! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:42'!testCarritoExpiraSiPaso30MinutosY1SegundoDesdeCreacionYNoFueUsado	| unTito unCarritoId |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.		self fallaPorCarritoExpiradoCuandoHago: [ unTito carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unTito dueñoDelCarritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1230YUnSegundo].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:39'!testCarritoExpiraSiPaso30MinutosY1SegundoDesdeUltimoAgregado	| unTito unCarritoId |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1150.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1200. 		self fallaPorCarritoExpiradoCuandoHago: [ unTito carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unTito dueñoDelCarritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1230YUnSegundo].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:43'!testCarritoNoExpiraSiPaso15MinutosDesdeCreacionYNoFueUsado	| unTito unCarritoId unCarrito |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.		unCarrito := unTito carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1215.	self assert: unCarrito estaVacio.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:43'!testCarritoNoExpiraSiPaso30MinutosDesdeCreacionYNoFueUsado	| unTito unCarritoId unCarrito |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.		unCarrito := unTito carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230.	self assert: unCarrito estaVacio.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:43'!testCarritoNoExpiraSiPaso30MinutosDesdeUltimoAgregado	| unTito unCarritoId unCarrito |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1150.		unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1200. 	unCarrito := unTito carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230.	self assert: unCarrito productos size = 2.	self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:45' prior: 33778269!testListarProductosDeUnCarritoAlQueLeAgregaronProductosEnDosTandasDistintasListaLaSumaDeEllos	| unTito unCarritoId |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unTito.		unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	unTito agregarACarritoConID: unCarritoId  producto: self isbnCronopios cantidad: 3.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) =  self bagCon5DeRayuelaY3DeCronopios.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:46' prior: 33779092!testListarProductosDeUnCarritoAlQueLeAgregaronProductosListaEsosProductos	| unTito unCarritoId |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unTito.	unTito agregarACarritoConID: unCarritoId  producto: self isbnRayuela cantidad: 5.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) = self bagCon5DeRayuela.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:47' prior: 33781016!testListarProductosDeUnCarritoRetornaUnaEstructuraVacia	| unTito unCarritoId |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unTito.	self assert: (unTito listarProductosDeCarritoConId: unCarritoId) = Bag new. ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:47' prior: 33766652!testNoSePuedeAgregarProductosConCantidadesNoPositivas	|unTito unCarritoId|	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unTito.		self should: [ unTito agregarACarritoConID: unCarritoId  producto:  self isbnRayuela cantidad: 0]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:48' prior: 33766015!testNoSePuedeAgregarProductosQueNoEstenEnElCatalogo	|unTito unCarritoId|		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unTito.		self should: [ unTito agregarACarritoConID: unCarritoId  producto: self isbnDeOtraEditorial cantidad: 2 ]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Carrito mensajeDeErrorProductoNoSeEncuentraEnElCatalogo ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:49' prior: 33741129!testNoSePuedeCrearCarritoConUsuarioExistenteYClaveInvalida	| unTito |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	self should: [unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '456' ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unTito cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:49' prior: 33741676!testNoSePuedeCrearCarritoDeClienteInexistente	| unTito |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	self should: [unTito nuevoCarritoParaClienteConID: 'jorge' conClave: '123' ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unTito cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:49' prior: 33779793!testNoSePuedenAgregarProductosAUnCarritoConIdInexistente	|unTito unCarritoIdInvalido|	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoIdInvalido := -1.		self should: [ unTito agregarACarritoConID: unCarritoIdInvalido  producto: self isbnRayuela cantidad: 2 ]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 15:50' prior: 33760899!testNoSePuedenListarLosProductosDeUnCarritoIdInexistente	|unTito unCarritoIdInvalido |	unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoIdInvalido := -1.		self should: [ unTito listarProductosDeCarritoConId: unCarritoIdInvalido ]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente ].! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 15:26'!titoDeCortazarConClientesPepe123YJuan456	^ Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } ) registroDeCarritos: Dictionary new catalogo: self catalogoCortazar.	! !!CarritoTito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:04'!conID: unID catalogo: unCatalogo dueño: unClienteId en: unMomento	^ CarritoTito new inicializarVacioConID: unID catalogo: unCatalogo dueño: unClienteId en: unMomento.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:17'!= otroCarrito	(otroCarrito isKindOf: Carrito) ifTrue: [ ^ carrito = otroCarrito ].	^ false.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:14'!agregar: unaCantidad de: unProducto	carrito agregar: unaCantidad de: unProducto.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:28'!cantidadDe: unProducto	^ carrito cantidadDe: unProducto.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:02'!dueño	^ dueño copy.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:19'!estaVacio	^ carrito estaVacio.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:23'!expiradoEn: unMomento	^ unMomento - ultimoUso > (Duration minutes: 30).! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:04'!id	^ id copy.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:03'!inicializarVacioConID: unID catalogo: unCatalogo dueño: unClienteId en: unMomento	carrito := Carrito con: unCatalogo.	dueño := unClienteId.	ultimoUso := unMomento.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:18'!productos	^ carrito productos.! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:23'!ultimoUso: unMomento	ultimoUso := unMomento! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:06'!conRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo	^ self new inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:23'!actualizarUltimoUsoACarritoConId: unCarritoId en: unMomento 	(registroDeCarritos at: unCarritoId) ultimoUso: unMomento.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:15' prior: 33759598!agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad	^ self agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad en: DateAndTime current.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:22'!agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad en: unMomento	(self carritoConId: unIdCarrito en: unMomento) agregar: unaCantidad de: unProducto.	self actualizarUltimoUsoACarritoConId: unIdCarrito en: unMomento.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:01' prior: 33730540!cantidadDeCarritos	^ registroDeCarritos size.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:14' prior: 33730675!carritoConId: unIdCarrito	^ self carritoConId: unIdCarrito en: DateAndTime current.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:05'!carritoConId: unIdCarrito en: unMomento	self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.	^ (registroDeCarritos at: unIdCarrito) copy.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:27' prior: 33731324!dueñoDelCarritoConId: unCarritoId 	^ self dueñoDelCarritoConId: unCarritoId en: DateAndTime current.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:03'!dueñoDelCarritoConId: unCarritoId en: unMomento	self validarExistenciaYVigenciaDeCarritoConId: unCarritoId en: unMomento.	^ (registroDeCarritos at: unCarritoId) dueño.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:00'!inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo	registroDeClientes := unRegistroDeClientes.	registroDeCarritos := unRegistroDeCarritos.	catalogo := unCatalogo.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:45' prior: 33753737!listarProductosDeCarritoConId: unIdCarrito 	^ self listarProductosDeCarritoConId: unIdCarrito en: DateAndTime current.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:04'!listarProductosDeCarritoConId: unIdCarrito en: unMomento	self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.	^ (registroDeCarritos at: unIdCarrito) productos.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:17'!nuevoCarritoParaClienteConID: unClienteId conClave: unaClave	^ self nuevoCarritoParaClienteConID: unClienteId conClave: unaClave en: DateAndTime current.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:21'!nuevoCarritoParaClienteConID: unClienteId conClave: unaClave en: unMomento	| unIdCarrito |	registroDeClientes at: unClienteId		ifPresent: [ :clave | clave = unaClave ifFalse: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ] ]		ifAbsent: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ].		unIdCarrito := registroDeCarritos size.	registroDeCarritos at: unIdCarrito put: (CarritoTito conID: unIdCarrito catalogo: catalogo dueño: unClienteId en: unMomento).	^unIdCarrito.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:01'!validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento	registroDeCarritos at: unIdCarrito 		ifPresent: [ :carrito | (carrito expiradoEn: unMomento) ifTrue: [ self error: Tito mensajeDeErrorCarritoExpirado ] ]		ifAbsent: [ self error: Tito mensajeDeErrorIdCarritoInexistente].! !TestsTusLibros removeSelector: #test01!Tito removeSelector: #nuevoCarritoParaClienteConID:conClave:enMomento:!Tito removeSelector: #inicializarConRegistroDeClientes:catalogo:!Tito removeSelector: #expiroCarritoConId:en:!Tito removeSelector: #carritoConId:enMomento:!Tito class removeSelector: #conRegistroDeClientes:catalogo:!"TusLibros"!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:14'!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.		self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:14' prior: 33803493!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi'.	self assert: false	"self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ]"! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:14'!listarComprasDeCliente: aString conClave: aString2 	self shouldBeImplemented.! !Tito removeSelector: #listarComprasDeCliente:conClave:!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:16'!listarComprasDeClienteConId: unClienteId conClave: unaClave 	^ self listarComprasDeCliente: unClienteId conClave: unaClave en: DateAndTime current.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:17' prior: 33803860!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi'.	self assert: false	"self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ]"! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:17'!listarComprasDeCliente: aString conClave: aString2 en: aDateAndTime 	self shouldBeImplemented.! !Tito removeSelector: #listarComprasDeCliente:conClave:en:!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:18' prior: 33804515!listarComprasDeClienteConId: unClienteId conClave: unaClave 	^ self ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:21'!chequearSiEsClienteValidoConClienteId: unClienteId  clave: unaClave	registroDeClientes at: unClienteId		ifPresent: [ :clave | clave = unaClave ifFalse: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ] ]		ifAbsent: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ].! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:22'!chequearValidezDeClienteConId: unClienteId  clave: unaClave	registroDeClientes at: unClienteId		ifPresent: [ :clave | clave = unaClave ifFalse: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ] ]		ifAbsent: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ].! !Tito removeSelector: #chequearSiEsClienteValidoConClienteId:clave:!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:24'!validarClienteConId: unClienteId  clave: unaClave	registroDeClientes at: unClienteId		ifPresent: [ :clave | clave = unaClave ifFalse: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ] ]		ifAbsent: [ self error: Tito mensajeDeErrorUsuarioOClaveInvalidos. ].! !Tito removeSelector: #chequearValidezDeClienteConId:clave:!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:25' prior: 33802180!nuevoCarritoParaClienteConID: unClienteId conClave: unaClave en: unMomento	| unIdCarrito |	self validarClienteConId: unClienteId clave: unaClave.	unIdCarrito := registroDeCarritos size.	registroDeCarritos at: unIdCarrito put: (CarritoTito conID: unIdCarrito catalogo: catalogo dueño: unClienteId en: unMomento).	^unIdCarrito.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:26' prior: 33805462!listarComprasDeClienteConId: unClienteId conClave: unaClave 	self validarClienteConId: unClienteId clave: unaClave.			! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:29' prior: 33804766!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi' en: self libroDeVentasVacio .	self assert: false	"self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ]"! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:29'!listarComprasDeClienteConId: unClienteId conClave: unaClave en: unLibroDeVentas	self validarClienteConId: unClienteId clave: unaClave.			! !Tito removeSelector: #listarComprasDeClienteConId:conClave:!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:30'!listarComprasDeClienteConId: unClienteId conClave: unaClave escritasEn: unLibroDeVentas	self validarClienteConId: unClienteId clave: unaClave.			! !Tito removeSelector: #listarComprasDeClienteConId:conClave:en:!Object subclass: #Tito	instanceVariableNames: 'catalogo registroDeClientes registroDeCarritos libroDeVentas'	classVariableNames: ''	category: 'TusLibros'!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:41' prior: 33807516!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi' escritasEn: self libroDeVentasVacio .	self assert: false	"self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ]"! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:42' prior: 33808749!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi'.	self assert: false	"self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ]"! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:42'!listarComprasDeClienteConId: unClienteId conClave: unaClave	self validarClienteConId: unClienteId clave: unaClave.			! !Tito removeSelector: #listarComprasDeClienteConId:conClave:escritasEn:!!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:43'!conRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas	^ self new inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas.! !Tito class removeSelector: #conRegistroDeClientes:registroDeCarritos:catalogo:!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:43'!inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas	registroDeClientes := unRegistroDeClientes.	registroDeCarritos := unRegistroDeCarritos.	catalogo := unCatalogo.	libroDeVentas  := unLibroDeVentas! !Tito removeSelector: #inicializarConRegistroDeClientes:registroDeCarritos:catalogo:!!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 16:44' prior: 33796819!titoDeCortazarConClientesPepe123YJuan456	^ Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  Dictionary new.	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 16:46' prior: 33810915!titoDeCortazarConClientesPepe123YJuan456	^ Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new.	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:46' prior: 33809240!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi'.	self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:47' prior: 33811643!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeCliente: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:47'!test02	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeCliente: 'Pepe' conClave: '1234']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:49'!test03	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unTito listarComprasDeCliente: 'Pepe' conClave: '1234') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:49' prior: 33812076!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:49' prior: 33812430!test02	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeClienteConId: 'Pepe' conClave: '1234']	raise:  Error 	withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:49' prior: 33812780!test03	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unTito listarComprasDeClienteConId: 'Pepe' conClave: '1234') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:49' prior: 33813814!test03	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unTito listarComprasDeClienteConId: 'Pepe' conClave: '123') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:51' prior: 33814107!test03	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:52' prior: 33809678!listarComprasDeClienteConId: unClienteId conClave: unaClave	self validarClienteConId: unClienteId clave: unaClave.	^ OrderedCollection new.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:54'!test004	| unTito | 		" HACER UNA COMPRA Y LISTAR LO QUE TIENE (QUIZÁS MEJOR HACER DOS SEGUIDAS)"	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:54'!test04	| unTito | 		" HACER UNA COMPRA Y LISTAR LO QUE TIENE (QUIZÁS MEJOR HACER DOS SEGUIDAS)"	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !TestsTusLibros removeSelector: #test004!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:56'!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unTito realizarVentaDeCarritoConId:  self ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:58' prior: 33815674!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido numeroTarjeta: self numeroTarjeta fechaExpiracion: self ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 16:59' prior: 33815899!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido numeroTarjeta: self numeroTarjetaValido fechaExpiracion: self ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:00' prior: 33816198!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido numeroTarjeta: self numeroTarjetaValido fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 nombreDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:00' prior: 33816503!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido			 numeroTarjeta: self numeroTarjetaValido 			 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 			 nombreDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:01' prior: 33815276!test04	| unTito | 		" HACER UNA COMPRA Y LISTAR LO QUE TIENE (QUIZÁS MEJOR HACER DOS SEGUIDAS)"	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito fallar.^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:01' prior: 33817263!test04	| unTito | 		" HACER UNA COMPRA Y LISTAR LO QUE TIENE (QUIZÁS MEJOR HACER DOS SEGUIDAS)"	unTito := self titoDeCortazarConClientesPepe123YJuan456.   unTito fallar.	^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:01'!IdCarritoInvalido	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:01' prior: 33818027!IdCarritoInvalido	^ -1.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:01'!numeroTarjetaValido	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:01' prior: 33818305!numeroTarjetaValido	^ 10.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:02'!nombreDueñoTarjeta	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:02' prior: 33818587!nombreDueñoTarjeta	^ 'lionel'! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:02'!realizarVentaDeCarritoConId: anInteger numeroTarjeta: anInteger2 fechaExpiracion: aDateAndTime nombreDueño: aString 	self shouldBeImplemented.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:03' prior: 33818864!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre 	self realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: DateAndTime current.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:04'!realizarVentaDeCarritoConId: anInteger numeroTarjeta: anInteger2 fechaExpiracion: aDateAndTime nombreDueño: aString en: aDateAndTime5 	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:05' prior: 33816876!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido			 numeroTarjeta: self numeroTarjetaValido 			 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 			 nombreDueño: self nombreDueñoTarjeta.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:06' prior: 33819481!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:07' prior: 33820133!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCajero := Cajero 	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:10' prior: 33819746!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .		self 	should: [unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjetaValido 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:10' prior: 33820807!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .		self 	should: [unTito realizarVentaDeCarritoCond:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjetaValido 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:11' prior: 33821344!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .		self 	should: [unTito realizarVentaDeCarritoConid:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjetaValido 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:11' prior: 33813068!test01 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:11' prior: 33813443!test02	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeClienteConId: 'Pepe' conClave: '1234']	raise:  Error 	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:12' prior: 33821880!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .		self 	should: [unTito realizarVentaDeCarritoConid:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjetaValido 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:16' prior: 33820450!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito  .		unCajero := Cajero 	! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:19' prior: 33823739!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta|		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito  .		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta 		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta  	! !!Tarjeta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:20'!vigenteHasta: unMesDeAño numeroDeTarjeta: unNumeroDeTarjeta nombreDelDueño: unNombre	^ self new inicializarConVigencia: unMesDeAño.! !Tarjeta class removeSelector: #vigenteHasta:!!Tarjeta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:21' prior: 33824719!vigenteHasta: unMesDeAño numeroDeTarjeta: unNumeroDeTarjeta nombreDelDueño: unNombre	^ self new inicializarConVigencia: unMesDeAño numeroDeTarjeta: unNumeroDeTarjeta nombreDelDueño: unNombre.! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:21'!inicializarConVigencia: unMesDeAño numero: unNumeroDeTarjeta nombreDelDueño: unNombre	mesDeAñoDeVigencia := unMesDeAño.	numeroDeTarjeta := unNumeroDeTarjeta.	nombreDelDueño := unNombre.! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:21' prior: 33825299!inicializarConVigencia: unMesDeAño numero: unNumeroDeTarjeta nombreDelDueño: unNombre	mesDeAñoDeVigencia := unMesDeAño.	numero := unNumeroDeTarjeta.	nombreDelDueño := unNombre.! !Tarjeta removeSelector: #inicializarConVigencia:!Object subclass: #Tarjeta	instanceVariableNames: 'fechaDeVigencia mesDeAñoDeVigencia nombreDelDueño numero'	classVariableNames: ''	category: 'TusLibros'!!Tarjeta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:22'!vigenteHasta: unMesDeAño numero: unNumeroDeTarjeta nombreDelDueño: unNombre	^ self new inicializarConVigencia: unMesDeAño numeroDeTarjeta: unNumeroDeTarjeta nombreDelDueño: unNombre.! !!Tarjeta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:22' prior: 33826089!vigenteHasta: unMesDeAño numero: unNumeroDeTarjeta nombreDelDueño: unNombre	^ self new inicializarConVigencia: unMesDeAño numero: unNumeroDeTarjeta nombreDelDueño: unNombre.! !Tarjeta class removeSelector: #vigenteHasta:numeroDeTarjeta:nombreDelDueño:!Object subclass: #Tarjeta	instanceVariableNames: 'mesDeAñoDeVigencia nombreDelDueño numero'	classVariableNames: ''	category: 'TusLibros'!!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:24' prior: 33736365!tarjetaVenceEnAbrilDel2010	^ Tarjeta vigenteHasta: self abrilDel2010 numero: self numeroTarjeta nombreDeDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:24' prior: 33736521!tarjetaVenceEnJunioDel1994	^ Tarjeta vigenteHasta: self junioDel1994 numero: self numeroTarjeta nombreDeDueño: self nombreDueñoTarjeta..! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:24' prior: 33736677!tarjetaVenceEnOctubreDel2020	^ Tarjeta vigenteHasta: self octubreDel2020 numero: self numeroTarjeta nombreDeDueño: self nombreDueñoTarjeta..! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:24'!numeroTarjeta	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:24' prior: 33827612!numeroTarjeta	^10.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:25' prior: 33827131!tarjetaVenceEnJunioDel1994	^ Tarjeta vigenteHasta: self junioDel1994 numero: self numeroTarjeta nombreDeDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:25' prior: 33827372!tarjetaVenceEnOctubreDel2020	^ Tarjeta vigenteHasta: self octubreDel2020 numero: self numeroTarjeta nombreDeDueño: self nombreDueñoTarjeta.! !TestsTusLibros removeSelector: #numeroTarjetaValido!!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:26' prior: 33826891!tarjetaVenceEnAbrilDel2010	^ Tarjeta vigenteHasta: self abrilDel2010 numero: self numeroTarjeta nombreDedDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:26' prior: 33827886!tarjetaVenceEnJunioDel1994	^ Tarjeta vigenteHasta: self junioDel1994 numero: self numeroTarjeta nombreDelDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:26' prior: 33828126!tarjetaVenceEnOctubreDel2020	^ Tarjeta vigenteHasta: self octubreDel2020 numero: self numeroTarjeta nombreDelDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 17:26' prior: 33828424!tarjetaVenceEnAbrilDel2010	^ Tarjeta vigenteHasta: self abrilDel2010 numero: self numeroTarjeta nombreDelDueño: self nombreDueñoTarjeta.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:26' prior: 33823189!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .		self 	should: [unTito realizarVentaDeCarritoConid:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:28' prior: 33824155!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta|		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta  	! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:30' prior: 33829937!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta|		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta  .						! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:31' prior: 33829393!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unTito realizarVentaDeCarritoConid:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.	self 	should: [unTito realizarVentaDeCarritoConid:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:32' prior: 33831240!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	  		unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.	self 	should: [unTito realizarVentaDeCarritoConid:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:32' prior: 33832004!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	  	self 	should: [unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:32'!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId   			self 	should: [unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:33' prior: 33833304!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123'.			self 	should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:34' prior: 33833878!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123'.			self 	should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:35' prior: 33834502!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self 	should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:39' prior: 33835127!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self fallaPorCarritoExpiradoCuandoHago: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:41' prior: 33830585!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta|		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento .						! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:43' prior: 33835728!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:43'!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.				self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:44' prior: 33837500!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.			self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:45' prior: 33838118!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:49' prior: 33836232!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta mesDeAñoDelMomento |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.      mesDeAñoDelMomento := MesDeAño new.		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento .						! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:49' prior: 33839723!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta mesDeAñoDelMomento |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.      mesDeAñoDelMomento := MesDeAño mes: unMomento month año: unMomento year.		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento .						! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:50' prior: 33840456!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta mesDeAñoDelMomento |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.      mesDeAñoDelMomento := MesDeAño mes: unMomento month año: unMomento year.		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: mesDeAñoDelMomento  .						! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:50' prior: 33841227!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta mesDeAñoDelMomento |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		unMomento month.      mesDeAñoDelMomento := MesDeAño mes: unMomento month año: unMomento year.		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: mesDeAñoDelMomento.						! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:56' prior: 33832774!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	  	self 	should: [unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente  ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:56' prior: 33836900!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:56' prior: 33838816!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self cuatroDeAbrilDel2010ALas1150 						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:56' prior: 33843944!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:58' prior: 33842009!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento.						! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:58' prior: 33844838!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 17:59' prior: 33846398!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.		unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:00' prior: 33847279!test07	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:04'!libroDeVentas	^ libroDeVentas copy.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:05' prior: 33842808!test05	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	  	self 	should: [unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:05' prior: 33843341!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:05' prior: 33849616!test06	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.										   self assert: unTito libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:06'!testNoSePuedeVenderSiElCarritoYaExpiro	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !TestsTusLibros removeSelector: #test07!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:06'!testNoSePuedeVenderSiElCarritoEstaVacio	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.										   self assert: unTito libroDeVentas = self libroDeVentasVacio   ] ! !TestsTusLibros removeSelector: #test06!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:07'!testNoSePuedeVenderSiElCarritoNoExiste	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	  	self 	should: [unTito realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorIdCarritoInexistente.												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ]! !TestsTusLibros removeSelector: #test05!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:07' prior: 33850958!testNoSePuedeVenderSiElCarritoYaExpiro	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.		self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:08' prior: 33853125!testNoSePuedeVenderSiElCarritoYaExpiro	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:08'!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:08' prior: 33854391!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn:  unTito .	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:09' prior: 33855064!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn:  unTito .	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:09' prior: 33855678!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:09' prior: 33856291!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .		self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:09' prior: 33856903!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:11' prior: 33857517!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.													self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:11' prior: 33858211!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.		unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020   						       nombreDueño: self nombreDueñoTarjeta.													self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:12' prior: 33859118!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:13' prior: 33860027!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  'as' ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:13' prior: 33860729!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:15'!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida ] ! !!Tito class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:16'!conRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant	^ self new inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant.! !Tito class removeSelector: #conRegistroDeClientes:registroDeCarritos:catalogo:libroDeVentas:!!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:17'!inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant	registroDeClientes := unRegistroDeClientes.	registroDeCarritos := unRegistroDeCarritos.	catalogo := unCatalogo.	libroDeVentas  := unLibroDeVentas.	merchant := unMerchant.! !Tito removeSelector: #inicializarConRegistroDeClientes:registroDeCarritos:catalogo:libroDeVentas:!!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 18:19' prior: 33811275!titoDeCortazarConClientesPepe123YJuan456	^ Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new	  		 merchant: self merchantProcessorTarjetaAceptada .	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 18:20'!titoDeCortazarConClientesPepe123YJuan456YMerchantRobada	^ Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new	  		 merchant: self merchantProcessorTarjetaAceptada .	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 18:20' prior: 33864251!titoDeCortazarConClientesPepe123YJuan456YMerchantRobada	^ Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new	  		 merchant: self merchantProcessorTarjetaRobada  .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:20' prior: 33862088!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantRobada  .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:21' prior: 33865125!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantRobada.	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:21' prior: 33865841!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantRobada.	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:21' prior: 33866555!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantRobada.	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaRobada ]  ! !!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:23'!total	^ carrito productos inject: 0 into: [ :acum :producto | acum + (carrito catalogo at: producto) ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:24' prior: 33867272!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantRobada.	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaRobada ]  ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:26' prior: 33863299!inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant	registroDeClientes := unRegistroDeClientes.	registroDeCarritos := unRegistroDeCarritos.	catalogo := unCatalogo.	libroDeVentas  := unLibroDeVentas.	merchantProcessor := unMerchant.! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:27' prior: 33869102!inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant	registroDeClientes := unRegistroDeClientes.	registroDeCarritos := unRegistroDeCarritos.	catalogo := unCatalogo.	libroDeVentas  := unLibroDeVentas.	merchantProcessor := unMerchant.! !Object subclass: #Tito	instanceVariableNames: 'catalogo registroDeClientes registroDeCarritos libroDeVentas merchantProcessor'	classVariableNames: ''	category: 'TusLibros'!!CarritoTito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:27' prior: 33867980!total	^ carrito total! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:27' prior: 33868187!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantRobada.	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaRobada ]  ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:28' prior: 33853737!testNoSePuedeVenderSiElCarritoYaExpiro	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := unTito nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.	self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorCarritoExpirado  .												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:28' prior: 33870323!testNoSePuedeVenderSiLaTarjetaEsRobada	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantRobada.	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaRobada .												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:28' prior: 33861401!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida .												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:28'!testNoSePuedeVenderSiLaTarjetaNoTieneSaldo	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida .												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:29' prior: 33873341!testNoSePuedeVenderSiLaTarjetaNoTieneSaldo	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida .												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:29'!titoDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo	self shouldBeImplemented.! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 18:29' prior: 33874911!titoDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo		^ Tito conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new	  		 merchant: self merchantProcessorTarjetaSinSaldo   .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:30' prior: 33874121!testNoSePuedeVenderSiLaTarjetaNoTieneSaldo	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida .												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:30' prior: 33875538!testNoSePuedeVenderSiLaTarjetaNoTieneSaldo	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo .	unCarritoId := self crearCarritoParaJuanEn: unTito .	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaSinSaldo  .												 self assert: unTito libroDeVentas = self libroDeVentasVacio   ]! !----SNAPSHOT----2015-06-16T18:31:25.739936-03:00 Pharo4.0.image priorSource: 229648!"TusLibros"!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:34' prior: 33851707!testNoSePuedeVenderSiElCarritoEstaVacio	| unTito unCarritoId | 	unTito := self titoDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unTito.			self should: [unTito realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.										   self assert: unTito libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:35' prior: 33817647!test04	| unTito | 		" HACER UNA COMPRA Y LISTAR LO QUE TIENE (QUIZÁS MEJOR HACER DOS SEGUIDAS)"	unTito := self titoDeCortazarConClientesPepe123YJuan456.	self crearCarritoParaJuanEn: unTito. 			^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:37' prior: 33877950!test04	| unCarritoId unTito | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		 		^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:38' prior: 33845719!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento.		libroDeVentas := unCajero libroDeVentas.						! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:39' prior: 33878361!test04	| unCarritoId unTito | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		 		^ self assert: 	(unTito libroDeVentas) = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:39' prior: 33879789!test04	| unCarritoId unTito | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		 		^ self assert: 	unTito libroDeVentas = self libroDeVentasVacio .	! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:39' prior: 33879067!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento.								! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:41' prior: 33880457!test04	| unCarritoId unTito otroCarritoId | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.			self assert: 	unTito libroDeVentas = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:44' prior: 33881805!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:46' prior: 33882882!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		 	primeraVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: 12.	segundaVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: 12.	resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:46' prior: 33884070!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.		otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				 	primeraVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: 12.	segundaVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: 12.	resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:47' prior: 33885421!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				 	primeraVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: 12.	segundaVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: 12.	resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:49' prior: 33886776!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado precioIsbnRayuela precioIsbnCronopios | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				precioIsbnRayuela := self catalogoCortazar at: self isbnRayuela .	precioIsbnCronopios := self catalogoCortazar at: self isbnCronopios.	 	primeraVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: (precioIsbnRayuela * 3 + precioIsbnCronopios * 2) .	segundaVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: (precioIsbnRayuela * 2 + precioIsbnCronopios * 3).	resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:50' prior: 33888174!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado precioIsbnRayuela precioIsbnCronopios | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				precioIsbnRayuela := self catalogoCortazar at: self isbnRayuela .	precioIsbnCronopios := self catalogoCortazar at: self isbnCronopios.	 	primeraVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: ((precioIsbnRayuela * 3) + precioIsbnCronopios * 2) .	segundaVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: ((precioIsbnRayuela * 2) + precioIsbnCronopios * 3).	resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 18:52' prior: 33889842!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado precioIsbnRayuela precioIsbnCronopios | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				precioIsbnRayuela := self catalogoCortazar at: self isbnRayuela .	precioIsbnCronopios := self catalogoCortazar at: self isbnCronopios.	 	primeraVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: (precioIsbnRayuela * 3) + (precioIsbnCronopios * 2) .	segundaVenta := Venta con: { self isbnRayuela . self isbnCronopios  } total: (precioIsbnRayuela * 2) + (precioIsbnCronopios * 3).	resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:58' prior: 33881123!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento.		registroDeCarritos delete: unCarrito.								! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 6/16/2015 18:58' prior: 33616580!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 6/16/2015 18:58' prior: 33893914!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:58' prior: 33893186!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento.		registroDeCarritos remove: unCarrito.								! !!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 6/16/2015 18:59' prior: 33894341!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:00' prior: 33894762!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento.		registroDeCarritos removeKey: unCarrito.								! !!Tito methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:00' prior: 33895911!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta:  unaTarjeta en: unMomento.		registroDeCarritos removeKey: unIdCarrito.								! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:02' prior: 33891514!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado precioIsbnRayuela precioIsbnCronopios | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				precioIsbnRayuela := self catalogoCortazar at: self isbnRayuela .	precioIsbnCronopios := self catalogoCortazar at: self isbnCronopios.	 	primeraVenta := Venta con: { self isbnRayuela. self isbnRayuela . self isbnRayuela . self isbnCronopios . self isbnCronopios  } total: (precioIsbnRayuela * 3) + (precioIsbnCronopios * 2) .	segundaVenta := Venta con: { self isbnRayuela. self isbnRayuela . self isbnCronopios . self isbnCronopios . self isbnCronopios  } total: (precioIsbnRayuela * 2) + (precioIsbnCronopios * 3).	resultadoEsperado := Bag newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:03'!testNoSePuedeListarProductosDeUnClienteConClienteIdInvalido 	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeClienteConId: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:04'!testNoSePuedeListarComprasDeUnClienteConClienteIdValidoPeroPasswordInvalida	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	self should: [ unTito listarComprasDeClienteConId: 'Pepe' conClave: '1234']	raise:  Error 	withExceptionDo: [ :error | self assert: error messageText = Tito mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:04'!testListarComprasDeUnUsuarioQueNoHizoComprasEsUnBagVacio	| unTito | 	unTito := self titoDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unTito listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !TestsTusLibros removeSelector: #test01!TestsTusLibros removeSelector: #test02!TestsTusLibros removeSelector: #test03!!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:06' prior: 33897363!test04	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado precioIsbnRayuela precioIsbnCronopios | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				precioIsbnRayuela := self catalogoCortazar at: self isbnRayuela .	precioIsbnCronopios := self catalogoCortazar at: self isbnCronopios.	 	primeraVenta := Venta con: { self isbnRayuela. self isbnRayuela . self isbnRayuela . self isbnCronopios . self isbnCronopios  } total: (precioIsbnRayuela * 3) + (precioIsbnCronopios * 2) .	segundaVenta := Venta con: { self isbnRayuela. self isbnRayuela . self isbnCronopios . self isbnCronopios . self isbnCronopios  } total: (precioIsbnRayuela * 2) + (precioIsbnCronopios * 3).	resultadoEsperado := OrderedCollection newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:08'!testListarComprasLuegoDeUnClienteIdValidoLuegoDeDosComprasEnDosTandasListaAmbas	| unCarritoId unTito otroCarritoId primeraVenta segundaVenta resultadoEsperado precioIsbnRayuela precioIsbnCronopios | 		unTito := self titoDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unTito. 	unTito agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unTito agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unTito realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				precioIsbnRayuela := self catalogoCortazar at: self isbnRayuela .	precioIsbnCronopios := self catalogoCortazar at: self isbnCronopios.	 	primeraVenta := Venta con: { self isbnRayuela. self isbnRayuela . self isbnRayuela . self isbnCronopios . self isbnCronopios  } total: (precioIsbnRayuela * 3) + (precioIsbnCronopios * 2) .	segundaVenta := Venta con: { self isbnRayuela. self isbnRayuela . self isbnCronopios . self isbnCronopios . self isbnCronopios  } total: (precioIsbnRayuela * 2) + (precioIsbnCronopios * 3).	resultadoEsperado := OrderedCollection newFrom: { primeraVenta. segundaVenta }.			self assert: 	unTito libroDeVentas = resultadoEsperado .	! !TestsTusLibros removeSelector: #test04!"TusLibros"!!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 19:25'!apiRestDeCortazarConClientesPepe123YJuan456	^ APIRestTusLibros conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new	  		 merchant: self merchantProcessorTarjetaAceptada .	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 19:25'!apiRestDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo		^ APIRestTusLibros conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new	  		 merchant: self merchantProcessorTarjetaSinSaldo   .	! !!TestsTusLibros methodsFor: 'ejemplos' stamp: 'ArtusoLeraRomero 6/16/2015 19:26'!apiRestDeCortazarConClientesPepe123YJuan456YMerchantRobada	^ APIRestTusLibros conRegistroDeClientes: (Dictionary newFromPairs: { 'pepe'. '123'. 'juan'. '456' } )	       registroDeCarritos: Dictionary new 	       catalogo: self catalogoCortazar	       libroDeVentas:  OrderedCollection new	  		 merchant: self merchantProcessorTarjetaRobada  .	! !!TestsTusLibros methodsFor: 'tests helpers' stamp: 'ArtusoLeraRomero 6/16/2015 19:24' prior: 33786001!fallaPorCarritoExpiradoCuandoHago: unBloque	self should: [ unBloque value ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = APIRestTusLibros mensajeDeErrorCarritoExpirado.].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:30' prior: 33786300!testAgregarProductosAUnCarritoEnDosTandasDejaAlCarritoConLaSumaDeAmbasTandas	|unaApiRest unCarritoId|	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unaApiRest.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.	self assert: (unaApiRest carritoConId: unCarritoId) = self carritoConTresDeRayuelaYDosDeCronopios.	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:30' prior: 33786876!testAgregarProductosAUnCarritoModificaLosProductosDeEseCarrito	|unaApiRest unCarritoId|	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unaApiRest.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	self assert: (unaApiRest carritoConId: unCarritoId) = self carritoConTresDeRayuela.		! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:30' prior: 33787341!testAlCrearDosCarritosDeDistintosClientesTienenDistintoID	| unaApiRest idCarritoPepe idCarritoJuan |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	idCarritoPepe := self crearCarritoParaPepeEn: unaApiRest.	idCarritoJuan := self crearCarritoParaJuanEn: unaApiRest.		self assert: unaApiRest cantidadDeCarritos = 2.	self deny: idCarritoPepe = idCarritoJuan.		self assert: (self carritoConId: idCarritoPepe tieneComoDueñoA: 'pepe' estaVacioEn: unaApiRest).	self assert: (self carritoConId: idCarritoJuan tieneComoDueñoA: 'juan' estaVacioEn: unaApiRest).! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:30' prior: 33787991!testAlCrearDosCarritosDelMismoClienteTienenDistintoID	| unaApiRest unIdCarrito otroIdCarrito |		unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unIdCarrito := self crearCarritoParaPepeEn: unaApiRest.	otroIdCarrito := self crearCarritoParaPepeEn: unaApiRest.		self assert: unaApiRest cantidadDeCarritos = 2.	self deny: unIdCarrito = otroIdCarrito.		self assert: (self carritoConId: unIdCarrito tieneComoDueñoA: 'pepe' estaVacioEn: unaApiRest).	self assert: (self carritoConId: otroIdCarrito tieneComoDueñoA: 'pepe' estaVacioEn: unaApiRest).	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:30' prior: 33788632!testAlCrearUnCarritoEstaVacioYSeAsociaSuCliente	| unaApiRest unIdCarrito |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unIdCarrito := self crearCarritoParaPepeEn: unaApiRest.		self assert: unaApiRest cantidadDeCarritos = 1.	self assert: (self carritoConId: unIdCarrito tieneComoDueñoA: 'pepe' estaVacioEn: unaApiRest).! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33789041!testCarritoExpiraSiPaso30MinutosY1SegundoDesdeCreacionYNoFueUsado	| unaApiRest unCarritoId |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := unaApiRest nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.		self fallaPorCarritoExpiradoCuandoHago: [ unaApiRest carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unaApiRest dueñoDelCarritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1230YUnSegundo].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33789828!testCarritoExpiraSiPaso30MinutosY1SegundoDesdeUltimoAgregado	| unaApiRest unCarritoId |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := unaApiRest nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1150.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1200. 		self fallaPorCarritoExpiradoCuandoHago: [ unaApiRest carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unaApiRest dueñoDelCarritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230YUnSegundo ].	self fallaPorCarritoExpiradoCuandoHago: [ unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1230YUnSegundo].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33790731!testCarritoNoExpiraSiPaso15MinutosDesdeCreacionYNoFueUsado	| unaApiRest unCarritoId unCarrito |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := unaApiRest nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.		unCarrito := unaApiRest carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1215.	self assert: unCarrito estaVacio.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33791206!testCarritoNoExpiraSiPaso30MinutosDesdeCreacionYNoFueUsado	| unaApiRest unCarritoId unCarrito |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := unaApiRest nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.		unCarrito := unaApiRest carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230.	self assert: unCarrito estaVacio.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33791681!testCarritoNoExpiraSiPaso30MinutosDesdeUltimoAgregado	| unaApiRest unCarritoId unCarrito |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := unaApiRest nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1150.		unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2 en: self cuatroDeAbrilDel2010ALas1200. 	unCarrito := unaApiRest carritoConId: unCarritoId en: self cuatroDeAbrilDel2010ALas1230.	self assert: unCarrito productos size = 2.	self assert: (unCarrito cantidadDe: self isbnRayuela) = 2.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33899999!testListarComprasDeUnUsuarioQueNoHizoComprasEsUnBagVacio	| unaApiRest | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.   	^ self assert: 	(unaApiRest listarComprasDeClienteConId: 'pepe' conClave: '123') = self libroDeVentasVacio .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33902252!testListarComprasLuegoDeUnClienteIdValidoLuegoDeDosComprasEnDosTandasListaAmbas	| unCarritoId unaApiRest otroCarritoId primeraVenta segundaVenta resultadoEsperado precioIsbnRayuela precioIsbnCronopios | 		unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := 	self crearCarritoParaJuanEn: unaApiRest. 	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.		unaApiRest realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.	self catalogoCortazar at: self isbnRayuela.	otroCarritoId := 	self crearCarritoParaJuanEn: unaApiRest. 	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 2.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 3.		unaApiRest realizarVentaDeCarritoConId: unCarritoId 			 numeroTarjeta:  self numeroTarjeta			fechaExpiracion:  self octubreDel2020 			nombreDueño: self nombreDueñoTarjeta.				precioIsbnRayuela := self catalogoCortazar at: self isbnRayuela .	precioIsbnCronopios := self catalogoCortazar at: self isbnCronopios.	 	primeraVenta := Venta con: (Bag newFrom: { self isbnRayuela. self isbnRayuela . self isbnRayuela . self isbnCronopios . self isbnCronopios  }) total: (precioIsbnRayuela * 3) + (precioIsbnCronopios * 2) a: 'juan' .	segundaVenta := Venta con: (Bag newFrom: { self isbnRayuela. self isbnRayuela . self isbnCronopios . self isbnCronopios . self isbnCronopios  }) total: (precioIsbnRayuela * 2) + (precioIsbnCronopios * 3) a: 'juan'.	resultadoEsperado := OrderedCollection newFrom: { primeraVenta. segundaVenta }.			self assert: 	unaApiRest libroDeVentas = resultadoEsperado .	! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33792357!testListarProductosDeUnCarritoAlQueLeAgregaronProductosEnDosTandasDistintasListaLaSumaDeEllos	| unaApiRest unCarritoId |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unaApiRest.		unaApiRest agregarACarritoConID: unCarritoId  producto: self isbnRayuela  cantidad: 5.	unaApiRest agregarACarritoConID: unCarritoId  producto: self isbnCronopios cantidad: 3.	self assert: (unaApiRest listarProductosDeCarritoConId: unCarritoId) =  self bagCon5DeRayuelaY3DeCronopios.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33792964!testListarProductosDeUnCarritoAlQueLeAgregaronProductosListaEsosProductos	| unaApiRest unCarritoId |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unaApiRest.	unaApiRest agregarACarritoConID: unCarritoId  producto: self isbnRayuela cantidad: 5.	self assert: (unaApiRest listarProductosDeCarritoConId: unCarritoId) = self bagCon5DeRayuela.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:29' prior: 33793449!testListarProductosDeUnCarritoRetornaUnaEstructuraVacia	| unaApiRest unCarritoId |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unaApiRest.	self assert: (unaApiRest listarProductosDeCarritoConId: unCarritoId) = Bag new. ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33793820!testNoSePuedeAgregarProductosConCantidadesNoPositivas	|unaApiRest unCarritoId|	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unaApiRest.		self should: [ unaApiRest agregarACarritoConID: unCarritoId  producto:  self isbnRayuela cantidad: 0]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Carrito mensajeDeErrorSoloSePuedeAgregarCantidadesEnterasPositivasDeProductos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33794369!testNoSePuedeAgregarProductosQueNoEstenEnElCatalogo	|unaApiRest unCarritoId|		unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoId := self crearCarritoParaPepeEn: unaApiRest.		self should: [ unaApiRest agregarACarritoConID: unCarritoId  producto: self isbnDeOtraEditorial cantidad: 2 ]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Carrito mensajeDeErrorProductoNoSeEncuentraEnElCatalogo ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33794904!testNoSePuedeCrearCarritoConUsuarioExistenteYClaveInvalida	| unaApiRest |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	self should: [unaApiRest nuevoCarritoParaClienteConID: 'pepe' conClave: '456' ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = APIRestTusLibros mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unaApiRest cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33795386!testNoSePuedeCrearCarritoDeClienteInexistente	| unaApiRest |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	self should: [unaApiRest nuevoCarritoParaClienteConID: 'jorge' conClave: '123' ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = APIRestTusLibros mensajeDeErrorUsuarioOClaveInvalidos. 			self assert: unaApiRest cantidadDeCarritos = 0].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33899562!testNoSePuedeListarComprasDeUnClienteConClienteIdValidoPeroPasswordInvalida	| unaApiRest | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.   	self should: [ unaApiRest listarComprasDeClienteConId: 'Pepe' conClave: '1234']	raise:  Error 	withExceptionDo: [ :error | self assert: error messageText = APIRestTusLibros mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33899137!testNoSePuedeListarProductosDeUnClienteConClienteIdInvalido 	| unaApiRest | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.   	self should: [ unaApiRest listarComprasDeClienteConId: 'Lionel' conClave: 'Messi']	raise:  Error 	withExceptionDo: [ :error | self assert: error messageText = APIRestTusLibros mensajeDeErrorUsuarioOClaveInvalidos ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:20' prior: 33742214!testNoSePuedeRealizarVentaConTarjetaVencidaHaceAños	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 cliente: 'pepe' en: (Date newDay: 1 month: 1 year: 1998) ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unCajero libroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:20' prior: 33742802!testNoSePuedeRealizarVentaConTarjetaVencidaHaceUnDia	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 cliente: 'pepe' en: (Date newDay: 1 month: 7 year: 1994) ]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unCajero libroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:20' prior: 33743390!testNoSePuedeRealizarVentaDeUnCarritoVacio	| unCajero |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	self should: [unCajero realizarVenta: self carritoVacioConCatalogoDeCortazar conTarjeta: self tarjetaVenceEnOctubreDel2020 cliente: 'pepe' en: self cincoDeNoviembreDel2007]		raise: Error		withExceptionDo: [ :error | 			self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.			self assert: unCajero libroDeVentas isEmpty ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33877238!testNoSePuedeVenderSiElCarritoEstaVacio	| unaApiRest unCarritoId | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unaApiRest.			self should: [unaApiRest realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio.										   self assert: unaApiRest libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33852444!testNoSePuedeVenderSiElCarritoNoExiste	| unaApiRest | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456 .	  	self 	should: [unaApiRest realizarVentaDeCarritoConId:  self IdCarritoInvalido				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]			raise: Error			withExceptionDo: [ :error | self assert: error messageText = APIRestTusLibros mensajeDeErrorIdCarritoInexistente.												 self assert: unaApiRest libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33871039!testNoSePuedeVenderSiElCarritoYaExpiro	| unaApiRest unCarritoId | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456 .	unCarritoId := unaApiRest nuevoCarritoParaClienteConID: 'pepe' conClave: '123' en: self cuatroDeAbrilDel2010ALas1200.	self should: [unaApiRest realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020  						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = APIRestTusLibros mensajeDeErrorCarritoExpirado  .												 self assert: unaApiRest libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:28' prior: 33871786!testNoSePuedeVenderSiLaTarjetaEsRobada	| unaApiRest unCarritoId | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456YMerchantRobada.	unCarritoId := self crearCarritoParaJuanEn: unaApiRest .	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unaApiRest realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaRobada .												 self assert: unaApiRest libroDeVentas = self libroDeVentasVacio   ] ! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:27' prior: 33872578!testNoSePuedeVenderSiLaTarjetaEstaVencida	| unaApiRest unCarritoId | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456 .	unCarritoId := self crearCarritoParaJuanEn: unaApiRest .	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unaApiRest realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self abrilDel2010   						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaVencida .												 self assert: unaApiRest libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:27' prior: 33876337!testNoSePuedeVenderSiLaTarjetaNoTieneSaldo	| unaApiRest unCarritoId | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo .	unCarritoId := self crearCarritoParaJuanEn: unaApiRest .	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.							self should: [unaApiRest realizarVentaDeCarritoConId:  unCarritoId				 			    numeroTarjeta: self numeroTarjeta 								 fechaExpiracion: self octubreDel2020    						       nombreDueño: self nombreDueñoTarjeta.]		raise: Error		withExceptionDo: [ :error | self assert: error messageText =  Cajero mensajeDeErrorTarjetaSinSaldo  .												 self assert: unaApiRest libroDeVentas = self libroDeVentasVacio   ]! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:27' prior: 33795856!testNoSePuedenAgregarProductosAUnCarritoConIdInexistente	|unaApiRest unCarritoIdInvalido|	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoIdInvalido := -1.		self should: [ unaApiRest agregarACarritoConID: unCarritoIdInvalido  producto: self isbnRayuela cantidad: 2 ]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = APIRestTusLibros mensajeDeErrorIdCarritoInexistente ].! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:27' prior: 33796361!testNoSePuedenListarLosProductosDeUnCarritoIdInexistente	|unaApiRest unCarritoIdInvalido |	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456.	unCarritoIdInvalido := -1.		self should: [ unaApiRest listarProductosDeCarritoConId: unCarritoIdInvalido ]		raise: Error		withExceptionDo: [ :error | self assert: error messageText = APIRestTusLibros mensajeDeErrorIdCarritoInexistente ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:20' prior: 33744173!testSePuedeRealizarVentaConTarjetaHastaElUltimoDiaDeVigencia	| unCajero unLibroDeVentas |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 cliente: 'pepe' en: (Date newDay: 30 month: 6 year: 1994) .		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 1.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:20' prior: 33746808!testSiRealizoMuchasVentasEstasAparecenEnElLibro	| unCajero unLibroDeVentas |		unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 cliente: 'pepe' en: self cincoDeNoviembreDel2007.	unCajero realizarVenta: self carritoConDosBestiario conTarjeta: self tarjetaVenceEnOctubreDel2020 cliente: 'pepe' en: self cincoDeNoviembreDel2007.		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 2.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.		self assert: (unLibroDeVentas at: 2) productos = self carritoConDosBestiario productos.	self assert: (unLibroDeVentas at: 2) total = self carritoConDosBestiario total.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:20' prior: 33747782!testSiRealizoUnaVentaEstaApareceEnElLibro	| unCajero unLibroDeVentas |	unCajero := Cajero registraVentasEn: self libroDeVentasVacio pagaA: self merchantProcessorTarjetaAceptada.	unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 cliente: 'pepe' en: self cincoDeNoviembreDel2007.		unLibroDeVentas := unCajero libroDeVentas.	self assert: unLibroDeVentas size = 1.	self assert: (unLibroDeVentas at: 1) productos = self carritoConTresDeRayuela productos.	self assert: (unLibroDeVentas at: 1) total = self carritoConTresDeRayuela total.! !!TestsTusLibros methodsFor: 'tests api' stamp: 'ArtusoLeraRomero 6/16/2015 19:26'!testSiSeRealizanDosVentasAUnClienteAparecenEnElLibroDeVentas	| unaApiRest unCarritoId otroCarritoId primeraVenta segundaVenta | 	unaApiRest := self apiRestDeCortazarConClientesPepe123YJuan456 .	unCarritoId  := self crearCarritoParaJuanEn: unaApiRest.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnRayuela cantidad: 3.	unaApiRest agregarACarritoConID: unCarritoId producto: self isbnCronopios cantidad: 2.	otroCarritoId  := self crearCarritoParaJuanEn: unaApiRest.	unaApiRest agregarACarritoConID: otroCarritoId producto: self isbnBestiario cantidad: 2.	unaApiRest realizarVentaDeCarritoConId: unCarritoId	numeroTarjeta: self numeroTarjeta 	fechaExpiracion: self octubreDel2020  	nombreDueño: self nombreDueñoTarjeta.	unaApiRest realizarVentaDeCarritoConId: otroCarritoId	numeroTarjeta: self numeroTarjeta 	fechaExpiracion: self octubreDel2020  	nombreDueño: self nombreDueñoTarjeta.	self assert: unaApiRest libroDeVentas size = 2.	primeraVenta := unaApiRest libroDeVentas at: 1.	segundaVenta := unaApiRest libroDeVentas at: 2.	self assert: primeraVenta cliente = 'juan'.	self assert: primeraVenta cliente = 'juan'.	self assert: primeraVenta productos = self carritoConTresDeRayuelaYDosDeCronopios productos.	self assert: segundaVenta productos = self carritoConDosBestiario productos.	self assert: primeraVenta total = self carritoConTresDeRayuelaYDosDeCronopios total.	self assert: segundaVenta total = self carritoConDosBestiario total.! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:21' prior: 33749761!testVentaATarjetaVencidaConMerchantProcessorCaidoFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorCaido.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 cliente: 'pepe' en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:21' prior: 33750422!testVentaATarjetaVencidaRobadaFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaRobada.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 cliente: 'pepe' en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:21' prior: 33751072!testVentaATarjetaVencidaSinSaldoFallaInformandoQueEstaVencida	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaSinSaldo.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnJunioDel1994 cliente: 'pepe' en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaVencida.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:21' prior: 33751726!testVentaATarjetaVigenteConMerchantProcessorCaidoFallaInformandoQueElMerchantProcessorEstaCaido	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorCaido.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 cliente: 'pepe' en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorElMerchantProcessorEstaCaido.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:21' prior: 33752420!testVentaATarjetaVigenteRobadaFallaInformandoQueFueRobada	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaRobada.		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnAbrilDel2010 cliente: 'pepe' en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaRobada.			self assert: unLibroDeVentas isEmpty ].! !!TestsTusLibros methodsFor: 'tests cajero' stamp: 'ArtusoLeraRomero 6/16/2015 19:21' prior: 33753067!testVentaATarjetaVigenteSinSaldoFallaInformandoQueNoTieneSaldo	| unCajero unLibroDeVentas |	unLibroDeVentas := self libroDeVentasVacio.	unCajero := Cajero registraVentasEn: unLibroDeVentas pagaA: self merchantProcessorTarjetaSinSaldo .		self should: [unCajero realizarVenta: self carritoConTresDeRayuela conTarjeta: self tarjetaVenceEnOctubreDel2020 cliente: 'pepe' en: (Date newDay: 5 month: 11 year: 2001 )]		raise: Error		withExceptionDo: [ :excepcion | 			self assert: excepcion messageText = Cajero mensajeDeErrorTarjetaSinSaldo.			self assert: unLibroDeVentas isEmpty ].! !!Cajero methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:18'!realizarVenta: unCarrito conTarjeta: unaTarjeta cliente: unCliente en: unaFecha	unCarrito estaVacio ifTrue: [self error: Cajero mensajeDeErrorNoSePuedeRealizarVentaConCarritoVacio].	(unaTarjeta estaVencidaEn: unaFecha) ifTrue: [self error: Cajero mensajeDeErrorTarjetaVencida].		merchantProcessor cobrar: unCarrito total a: unaTarjeta.		libroDeVentas add: (Venta con: unCarrito productos total: unCarrito total a: unCliente).! !!APIRestTusLibros class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:16'!conRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant	^ self new inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant.! !!APIRestTusLibros class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/15/2015 18:16'!mensajeDeErrorCarritoExpirado	^ 'El carrito ya ha expirado'! !!APIRestTusLibros class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:21'!mensajeDeErrorIdCarritoInexistente	^ 'El ID no está asociado a ningún carrito.'! !!APIRestTusLibros class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/11/2015 21:09'!mensajeDeErrorUsuarioOClaveInvalidos	^ 'El usuario o la contraseña son incorrectos'! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:23'!actualizarUltimoUsoACarritoConId: unCarritoId en: unMomento 	(registroDeCarritos at: unCarritoId) ultimoUso: unMomento.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:15'!agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad	^ self agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad en: DateAndTime current.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:22'!agregarACarritoConID: unIdCarrito producto: unProducto cantidad: unaCantidad en: unMomento	(self carritoConId: unIdCarrito en: unMomento) agregar: unaCantidad de: unProducto.	self actualizarUltimoUsoACarritoConId: unIdCarrito en: unMomento.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:01'!cantidadDeCarritos	^ registroDeCarritos size.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:14'!carritoConId: unIdCarrito	^ self carritoConId: unIdCarrito en: DateAndTime current.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:05'!carritoConId: unIdCarrito en: unMomento	self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.	^ (registroDeCarritos at: unIdCarrito) copy.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:27'!dueñoDelCarritoConId: unCarritoId 	^ self dueñoDelCarritoConId: unCarritoId en: DateAndTime current.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:03'!dueñoDelCarritoConId: unCarritoId en: unMomento	self validarExistenciaYVigenciaDeCarritoConId: unCarritoId en: unMomento.	^ (registroDeCarritos at: unCarritoId) dueño.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:27'!inicializarConRegistroDeClientes: unRegistroDeClientes registroDeCarritos: unRegistroDeCarritos catalogo: unCatalogo libroDeVentas: unLibroDeVentas merchant: unMerchant	registroDeClientes := unRegistroDeClientes.	registroDeCarritos := unRegistroDeCarritos.	catalogo := unCatalogo.	libroDeVentas  := unLibroDeVentas.	merchantProcessor := unMerchant.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:04'!libroDeVentas	^ libroDeVentas copy.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 16:52'!listarComprasDeClienteConId: unClienteId conClave: unaClave	self validarClienteConId: unClienteId clave: unaClave.	^ OrderedCollection new.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:45'!listarProductosDeCarritoConId: unIdCarrito 	^ self listarProductosDeCarritoConId: unIdCarrito en: DateAndTime current.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:04'!listarProductosDeCarritoConId: unIdCarrito en: unMomento	self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.	^ (registroDeCarritos at: unIdCarrito) productos.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 15:17'!nuevoCarritoParaClienteConID: unClienteId conClave: unaClave	^ self nuevoCarritoParaClienteConID: unClienteId conClave: unaClave en: DateAndTime current.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:25'!nuevoCarritoParaClienteConID: unClienteId conClave: unaClave en: unMomento	| unIdCarrito |	self validarClienteConId: unClienteId clave: unaClave.	unIdCarrito := registroDeCarritos size.	registroDeCarritos at: unIdCarrito put: (CarritoAPIRest conID: unIdCarrito catalogo: catalogo dueño: unClienteId en: unMomento).	^unIdCarrito.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 17:03'!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre 	self realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: DateAndTime current.! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:18'!realizarVentaDeCarritoConId: unIdCarrito numeroTarjeta: unNumeroDeTarjeta fechaExpiracion: unMesDeAño nombreDueño: unNombre en: unMomento	| unCajero unCarrito unaTarjeta  |		self validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento.		unCarrito := self carritoConId: unIdCarrito.		unCajero := Cajero registraVentasEn: libroDeVentas pagaA: merchantProcessor.		unaTarjeta := Tarjeta vigenteHasta: unMesDeAño  numero: unNumeroDeTarjeta  nombreDelDueño: unNombre.		      		unCajero realizarVenta: unCarrito conTarjeta: unaTarjeta cliente: unCarrito dueño en: unMomento.		registroDeCarritos removeKey: unIdCarrito.								! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:24'!validarClienteConId: unClienteId  clave: unaClave	registroDeClientes at: unClienteId		ifPresent: [ :clave | clave = unaClave ifFalse: [ self error: APIRestTusLibros mensajeDeErrorUsuarioOClaveInvalidos. ] ]		ifAbsent: [ self error: APIRestTusLibros mensajeDeErrorUsuarioOClaveInvalidos. ].! !!APIRestTusLibros methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:24'!validarExistenciaYVigenciaDeCarritoConId: unIdCarrito en: unMomento	registroDeCarritos at: unIdCarrito 		ifPresent: [ :carrito | (carrito expiradoEn: unMomento) ifTrue: [ self error: APIRestTusLibros mensajeDeErrorCarritoExpirado ] ]		ifAbsent: [ self error: APIRestTusLibros mensajeDeErrorIdCarritoInexistente].! !!CarritoAPIRest class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:25'!conID: unID catalogo: unCatalogo dueño: unClienteId en: unMomento	^ CarritoAPIRest new inicializarVacioConID: unID catalogo: unCatalogo dueño: unClienteId en: unMomento.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:17'!= otroCarrito	(otroCarrito isKindOf: Carrito) ifTrue: [ ^ carrito = otroCarrito ].	^ false.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:14'!agregar: unaCantidad de: unProducto	carrito agregar: unaCantidad de: unProducto.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:28'!cantidadDe: unProducto	^ carrito cantidadDe: unProducto.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:02'!dueño	^ dueño copy.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:19'!estaVacio	^ carrito estaVacio.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:23'!expiradoEn: unMomento	^ unMomento - ultimoUso > (Duration minutes: 30).! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:04'!id	^ id copy.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:03'!inicializarVacioConID: unID catalogo: unCatalogo dueño: unClienteId en: unMomento	carrito := Carrito con: unCatalogo.	dueño := unClienteId.	ultimoUso := unMomento.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 13:18'!productos	^ carrito productos.! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 18:27'!total	^ carrito total! !!CarritoAPIRest methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 14:23'!ultimoUso: unMomento	ultimoUso := unMomento! !!Venta class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:18'!con: unaColeccionDeProductos total: unMonto a: unCliente	^ self new inicializarCon: unaColeccionDeProductos total: unMonto cliente: unCliente.! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:19'!= otraVenta	otraVenta species = self species ifFalse: [ ^false ].	^ (self productos = otraVenta productos and: [ self total = otraVenta total ]) and: [ self cliente = otraVenta cliente ].! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:19'!cliente	^ cliente! !!Venta methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/16/2015 19:19'!inicializarCon: unaColeccionDeProductos total: unMonto cliente: unCliente	productos := unaColeccionDeProductos.	total := unMonto.	cliente := unCliente.! !Tito removeSelector: #validarExistenciaYVigenciaDeCarritoConId:en:!Tito removeSelector: #validarClienteConId:clave:!Tito removeSelector: #realizarVentaDeCarritoConId:numeroTarjeta:fechaExpiracion:nombreDueño:en:!Tito removeSelector: #realizarVentaDeCarritoConId:numeroTarjeta:fechaExpiracion:nombreDueño:!Tito removeSelector: #nuevoCarritoParaClienteConID:conClave:en:!Tito removeSelector: #nuevoCarritoParaClienteConID:conClave:!Tito removeSelector: #listarProductosDeCarritoConId:en:!Tito removeSelector: #listarProductosDeCarritoConId:!Tito removeSelector: #listarComprasDeClienteConId:conClave:!Tito removeSelector: #libroDeVentas!Tito removeSelector: #inicializarConRegistroDeClientes:registroDeCarritos:catalogo:libroDeVentas:merchant:!Tito removeSelector: #dueñoDelCarritoConId:en:!Tito removeSelector: #dueñoDelCarritoConId:!Tito removeSelector: #carritoConId:en:!Tito removeSelector: #carritoConId:!Tito removeSelector: #cantidadDeCarritos!Tito removeSelector: #agregarACarritoConID:producto:cantidad:en:!Tito removeSelector: #agregarACarritoConID:producto:cantidad:!Tito removeSelector: #actualizarUltimoUsoACarritoConId:en:!Tito class removeSelector: #mensajeDeErrorUsuarioOClaveInvalidos!Tito class removeSelector: #mensajeDeErrorIdCarritoInexistente!Tito class removeSelector: #mensajeDeErrorCarritoExpirado!Tito class removeSelector: #conRegistroDeClientes:registroDeCarritos:catalogo:libroDeVentas:merchant:!Smalltalk globals removeClassNamed: #Tito!CarritoTito removeSelector: #ultimoUso:!CarritoTito removeSelector: #total!CarritoTito removeSelector: #productos!CarritoTito removeSelector: #inicializarVacioConID:catalogo:dueño:en:!CarritoTito removeSelector: #id!CarritoTito removeSelector: #expiradoEn:!CarritoTito removeSelector: #estaVacio!CarritoTito removeSelector: #dueño!CarritoTito removeSelector: #cantidadDe:!CarritoTito removeSelector: #agregar:de:!CarritoTito removeSelector: #=!CarritoTito class removeSelector: #conID:catalogo:dueño:en:!Smalltalk globals removeClassNamed: #CarritoTito!Cajero removeSelector: #realizarVenta:conTarjeta:en:!Venta removeSelector: #inicializarCon:total:!Venta class removeSelector: #con:total:!TestsTusLibros removeSelector: #titoDeCortazarConClientesPepe123YJuan456YMerchantRobada!TestsTusLibros removeSelector: #titoDeCortazarConClientesPepe123YJuan456YMerchantNoSaldo!TestsTusLibros removeSelector: #titoDeCortazarConClientesPepe123YJuan456!"TusLibros"!----QUIT/NOSAVE----2015-06-16T19:36:35.95394-03:00 Pharo4.0.image priorSource: 322606!----STARTUP----2015-06-20T13:38:00.169207-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'AutoGenTutorial 6/20/2015 17:17' prior: 33616580!divideTwoByZero			2/0.			"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.			- Remove the line of code above.			- Right-click and select 'Accept' to compile the new version of the method			- click the button 'Proceed' to continue execution.			".			PharoTutorial next. ! !Object subclass: #IntegerNumber	instanceVariableNames: 'value'	classVariableNames: ''	category: 'estudiando '!Object subclass: #FloatNumber	instanceVariableNames: 'value'	classVariableNames: ''	category: 'estudiando '!Object subclass: #NumberPartuso	instanceVariableNames: 'value'	classVariableNames: ''	category: 'estudiando '!Object subclass: #NumberPartuso	instanceVariableNames: 'value'	classVariableNames: ''	category: 'estudiando '!NumberPartuso subclass: #IntegerNumber	instanceVariableNames: ''	classVariableNames: ''	category: 'estudiando '!NumberPartuso subclass: #FloatNumber	instanceVariableNames: ''	classVariableNames: ''	category: 'estudiando '!Object subclass: #NumberNotPartuso	instanceVariableNames: 'value'	classVariableNames: ''	category: 'estudiando '!!NumberPartuso class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:26'!newWith: anInteger 	self shouldBeImplemented.! !!NumberPartuso class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:26' prior: 33948989!newWith: anInteger 	self new initialize! !!NumberPartuso methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:27'!initializeWith: aValue	value := aValue! !!NumberPartuso class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:27' prior: 33949153!newWith: anInteger 	self new initializeWith: anInteger! !!NumberPartuso methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:28'!value	^ value.! !!NumberPartuso class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:33' prior: 33949446!newWith: anInteger 	^ self new initializeWith: anInteger! !!NumberNotPartuso class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:34'!newWith: anInteger 	self shouldBeImplemented.! !!NumberNotPartuso class methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:34' prior: 33949892!newWith: anInteger 	^ self new initializeWith: anInteger.! !!NumberNotPartuso methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:35'!initializeWith: anInteger 	self shouldBeImplemented.! !!NumberNotPartuso methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:35' prior: 33950216!initializeWith: anInteger 	value := anInteger.! !!NumberNotPartuso methodsFor: 'as yet unclassified' stamp: 'ArtusoLeraRomero 6/20/2015 17:36'!value 	^ value.! !----QUIT/NOSAVE----2015-06-21T10:07:19.345552-03:00 Pharo4.0.image priorSource: 322606!----STARTUP----2015-07-13T21:57:09.474949-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!!PacManTest methodsFor: 'actors' stamp: 'HernanWilkinson 5/16/2012 16:33'!blueGhost	self shouldBeImplemented ! !!PacManTest methodsFor: 'movements' stamp: 'HernanWilkinson 5/16/2012 16:33'!down	self shouldBeImplemented ! !!PacManTest methodsFor: 'construction block types' stamp: 'HernanWilkinson 5/16/2012 16:33'!ghostHouseDoorType	self shouldBeImplemented ! !!PacManTest methodsFor: 'movements' stamp: 'HernanWilkinson 5/16/2012 16:33'!left	self shouldBeImplemented ! !!PacManTest methodsFor: 'construction block types' stamp: 'HernanWilkinson 5/16/2012 16:33'!leftTransporterType	self shouldBeImplemented ! !!PacManTest methodsFor: 'actors' stamp: 'HernanWilkinson 5/16/2012 16:33'!pacman	self shouldBeImplemented ! !!PacManTest methodsFor: 'movements' stamp: 'HernanWilkinson 5/16/2012 16:33'!right	self shouldBeImplemented ! !!PacManTest methodsFor: 'construction block types' stamp: 'HernanWilkinson 5/16/2012 16:33'!spaceType	self shouldBeImplemented ! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:31'!test01GhostCanNotGoIntoAWall	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self left ).	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self right ).	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self up ).	self assert: self blueGhost position equals: ( self wallType nextPositionFor: self blueGhost going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:31'!test02PacmanCanNotGoIntoAWall	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self left ).	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self right ).	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self up ).	self assert: self pacman position equals: ( self wallType nextPositionFor: self pacman going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:31'!test03GhostMovesIntoSpaces	self assert: ( self blueGhost position + (-1@0) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self left ).	self assert: ( self blueGhost position +  (1@0) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self right ).	self assert: ( self blueGhost position +  (0@1) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self up ).	self assert: ( self blueGhost position + (0@ -1) ) equals: ( self spaceType nextPositionFor: self blueGhost going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 4/28/2015 19:25'!test04PacmanMovesIntoSpaces	self assert: ( self pacman position + (-2@0) ) equals: ( self spaceType nextPositionFor: self pacman going: self left ).	self assert: ( self pacman position +  (2@0) ) equals: ( self spaceType nextPositionFor: self pacman going: self right ).	self assert: ( self pacman position +  (0@2) ) equals: ( self spaceType nextPositionFor: self pacman going: self up ).	self assert: ( self pacman position + (0@ -2) ) equals: ( self spaceType nextPositionFor: self pacman going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test05GhostCanEnterHisHouse	self assert: ( self blueGhost position + (-1@0) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self left).	self assert: ( self blueGhost position +  (1@0) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self right ).	self assert: ( self blueGhost position +  (0@1) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self up ).	self assert: ( self blueGhost position + (0@ -1) ) equals: (self ghostHouseDoorType nextPositionFor: self blueGhost going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test06PacmanCanNotEnterGhostHouse	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self left ).	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self right ).	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self up ).	self assert: self pacman position equals: ( self ghostHouseDoorType nextPositionFor: self pacman going: self down ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test07GhostCanNotGoIntoTransporter	self assert: self blueGhost position equals: ( self leftTransporterType nextPositionFor: self blueGhost going: self left ).	self assert: self blueGhost position equals: ( self leftTransporterType nextPositionFor: self blueGhost going: self right ).! !!PacManTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/16/2012 16:30'!test08TransporterMovesPacmanToNewPosition	self assert: (3@10) equals: ( self leftTransporterType nextPositionFor: self pacman going: self left ).	self assert: (3@10) equals: ( self leftTransporterType nextPositionFor: self pacman going: self right ).! !!PacManTest methodsFor: 'movements' stamp: 'HernanWilkinson 5/16/2012 16:33'!up	self shouldBeImplemented ! !!PacManTest methodsFor: 'construction block types' stamp: 'HernanWilkinson 5/16/2012 16:33'!wallType	self shouldBeImplemented ! !"PacMan"!----STARTUP----2015-10-05T21:30:34.047428-03:00 as /home/partu/Escritorio/pharo4.0/shared/Pharo4.0.image!Object subclass: #Cell	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!Cell subclass: #AliveCell	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!Cell subclass: #DeadCell	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!!Cell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 21:33'!alive 	^ SubclassResponsibility! !!AliveCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 21:33'!alive	^ true.! !!DeadCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 21:33'!alive	^ false.! !!DeadCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 21:33' prior: 33956952!alive	^ false.! !Object subclass: #BoardOfCells	instanceVariableNames: 'cells'	classVariableNames: ''	category: 'Conways'!Object subclass: #Rule	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!Rule subclass: #LiveWithFewerThan2	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!Rule subclass: #LiveWith2or3	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!Rule subclass: #LiveWithMorThan3	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!Rule subclass: #DeadWith3	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!!Rule methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:37'!applyRuleToDeadCell: aCell! !!Rule methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:37' prior: 33957796!applyRuleToDeadCell: aCell	^SubclassResponsibility ! !!Rule methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:38'!applyRuleToLiveCell: aCell	^SubclassResponsibility ! !Cell subclass: #LiveCell	instanceVariableNames: ''	classVariableNames: ''	category: 'Conways'!!LiveCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:38'!alive	^ true.! !Smalltalk globals removeClassNamed: #AliveCell!!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:48'!applyRuleToCellInCoords: aCoords of: aBoard	^(aBoard cellOn: aCoords )applyRule: self	! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:49' prior: 33958449!applyRuleToCellInCoords: aCoords of: aBoard	^(aBoard cellOn: aCoords) applyRule: self	! !!DeadCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:49'!applyRules: aRule	^aRule applyRuleForDeadCell: self.! !!DeadCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:50'!applyRule: aRule	^aRule applyRuleForDeadCell: self.! !DeadCell removeSelector: #applyRules:!!LiveCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:50'!applyRule: aRule	^aRule applyRuleForLiveCell: self.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:50' prior: 33958642!applyRuleToCellInCoords: aCoords of: aBoard	^(aBoard cellIn: aCoords) applyRule: self	! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:52' prior: 33959296!applyRuleToCellInCoords: aCoords of: aBoard	^(aBoard cellIn: aCoords) applyRule: self inCoords: aCoords	! !!DeadCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:52' prior: 33958959!applyRule: aRule	| aBoard aCoords |	^aRule applyRuleForDeadCell: self of: aBoard inCoords: aCoords.! !!DeadCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:53'!applyRule: aRule for: aBoard inCoords: aCoord	^ aRule applyRuleForDeadCell: self of: aBoard inCoords: aCoord.! !DeadCell removeSelector: #applyRule:!!LiveCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:53'!applyRule: aRule for: aBoard inCoords: aCoord	^ aRule applyRuleForLeadCell: self of: aBoard inCoords: aCoord.! !!LiveCell methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:53' prior: 33960125!applyRule: aRule for: aBoard inCoords: aCoord	^ aRule applyRuleForLiveCell: self of: aBoard inCoords: aCoord.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:54' prior: 33959489!applyRuleToCellInCoords: aCoords of: aBoard	^(aBoard cellIn: aCoords) applyRule: self for: aBoard inCoords: aCoords.	! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:55' prior: 33960554!applyRuleToCellInCoords: aCoord of: aBoard	^(aBoard cellIn: aCoord) applyRule: self for: aBoard inCoords: aCoord.	! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:55'!applyRuleForDeadCell: aCell  of: aBoard	| aCoord |	^(aBoard cellIn: aCoord) applyRule: self for: aBoard inCoords: aCoord.	! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:57'!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ 123.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:57'!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^False.! !DeadWith3 removeSelector: #applyRuleForDeadCell:of:!!Rule methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:57'!applyRuleToCellInCoords: aCoord of: aBoard	^(aBoard cellIn: aCoord) applyRule: self for: aBoard inCoords: aCoord.	! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:58' prior: 33960778!applyRuleToCellInCoords: aCoord of: aBoard	^ ShouldBeImplemented .	! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:58'!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^123.! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:58'!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ false.! !!LiveWithFewerThan2 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:59'!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ 123.! !!LiveWithMorThan3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:59'!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ 123.! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:59'!applyRuleToCellInCoords: aCoord of: aBoard	^ ShouldBeImplemented .	! !!LiveWithFewerThan2 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:59'!applyRuleToCellInCoords: aCoord of: aBoard	^ ShouldBeImplemented .	! !!LiveWithMorThan3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:59'!applyRuleToCellInCoords: aCoord of: aBoard	^ ShouldBeImplemented .	! !!LiveWithFewerThan2 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:59'!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^123.! !!LiveWithMorThan3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 22:59'!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^123.! !!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:00'!cellIn: aCoord	^ (cells at: aCoord first) at aCoord second.! !!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:02' prior: 33963391!cellIn: aCoord	^ (cells at: aCoord x) at aCoord y.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:04' prior: 33961197!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ aBoard aliveNeighboursOfCellInCoords: aCoord .! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:06' prior: 33961351!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^aCell.! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:06' prior: 33962093!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ aCell.! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:06' prior: 33964101!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ false.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:06' prior: 33963927!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^ false.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:06' prior: 33964448!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^ False.! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:06' prior: 33964276!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ False.! !!LiveWithFewerThan2 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:07' prior: 33962258!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ False.! !!LiveWithMorThan3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:07' prior: 33962419!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ False.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:09' prior: 33963715!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ (aBoard aliveNeighboursOfCellInCoords: aCoord ) equals: 3.! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:11' prior: 33961937!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	| amount_of_alive_neighbours |	amount_of_alive_neighbours := aBoard aliveNeighboursOfCellInCoords: aCoord 	.		^ (amount_of_alive_neighbours equals: 2) or: (amount_of_alive_neighbours  equals: 3).! !Smalltalk globals removeClassNamed: #LiveWithFewerThan2!Smalltalk globals removeClassNamed: #LiveWithMorThan3!LiveCell removeSelector: #applyRule:!!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:22'!aliveNeighboursOfCellInCoords: aCoords	| neighbours |	neighbours := self neighboursOfCellInCoords: aCoords.! !!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:28' prior: 33966056!aliveNeighboursOfCellInCoords: aCoord	| coords_of_neighbours count|	count :=0.	coords_of_neighbours := self neighboursOfCellInCoords: aCoord.		coords_of_neighbours  do: [ :coord | (self cellIn: coord alive) isTrue: [count := count+1] ].	^ count.! !!LiveWith2or3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:29' prior: 33964795!applyRuleForDeadCell: aCell  of: aBoard inCoords: aCoord 	^ false.! !!DeadWith3 methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:29' prior: 33964620!applyRuleForLiveCell: aCell  of: aBoard inCoords: aCoord 	^ false.! !!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:34'!neighboursOfCellInCoords: aCoord	| result |	result := LinkedList new.	! !!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:42' prior: 33966963!neighboursOfCellInCoords: aCoord	| result |	result := LinkedList new.				result select:[ :c | (c x >= 0) and:							   (c x < self weigth ) and:								(c y >= 0) and: 								(c y < self height)								 ]			! !Object subclass: #BoardOfCells	instanceVariableNames: 'cells weigth height'	classVariableNames: ''	category: 'Conways'!!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:46' prior: 33967144!neighboursOfCellInCoords: aCoord	| result |	result := LinkedList new.	result := result add: (aCoord x -1)@(aCoord y -1).	result := result add: (aCoord x -1)@(aCoord y).	result := result add: (aCoord x -1)@(aCoord y +1).	result := result add: (aCoord x -1)@(aCoord y -1).	result := result add: (aCoord x -1)@(aCoord y -1).	result := result add: (aCoord x -1)@(aCoord y -1).				result select:[ :c | (c x >= 0) and:							   (c x < self weigth ) and:								(c y >= 0) and: 								(c y < self height)								 ]			! !!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:49' prior: 33967597!neighboursOfCellInCoords: aCoord	| result |	result := LinkedList new.	result := result add: (aCoord x -1)@(aCoord y -1).	result := result add: (aCoord x -1)@(aCoord y).	result := result add: (aCoord x -1)@(aCoord y +1).	result := result add: (aCoord x)@(aCoord y -1).	result := result add: (aCoord x)@(aCoord y +1).	result := result add: (aCoord x +1)@(aCoord y -1).	result := result add: (aCoord x +1)@(aCoord y).	result := result add: (aCoord x +1)@(aCoord y	+1).							result select:[ :c | (c x >= 0) and:							   (c x < self weigth ) and:								(c y >= 0) and: 								(c y < self height)								 ]			! !!BoardOfCells methodsFor: 'as yet unclassified' stamp: 'LauritoArtuso 10/5/2015 23:50' prior: 33968235!neighboursOfCellInCoords: aCoord	| result |	result := LinkedList new.	result := result add: (aCoord x -1)@(aCoord y -1).	result := result add: (aCoord x -1)@(aCoord y).	result := result add: (aCoord x -1)@(aCoord y +1).	result := result add: (aCoord x)@(aCoord y -1).	result := result add: (aCoord x)@(aCoord y +1).	result := result add: (aCoord x +1)@(aCoord y -1).	result := result add: (aCoord x +1)@(aCoord y).	result := result add: (aCoord x +1)@(aCoord y	+1).			result select:[ :c | (c x >= 0) and:							   (c x < self weigth ) and:								(c y >= 0) and: 								(c y < self height)								 ]		return result.	! !